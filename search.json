[{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/basic-graph.html","id":"create-the-graph","dir":"Articles","previous_headings":"","what":"Create the graph","title":"Modeling trajectory with a graph","text":"create graph function geopressure_graph(), perform following steps: 1. keep nodes locations within 99% percentile static pressure map. (node uniquely identify latitude, longitude stationary period). 2. keep nodes within reach distance nodes based average groundspeed 150km/h. accounts distance possible nodes previous stationay period next stationary period. computed image binary distance function distmap() EBImage package. step allows eliminate multiple impossible nodes without compute possible transition. 3. build graph based filtered nodes containing edges requiring average groundspeed less 150km/h. 4. Finally, trim graph based flow graph constraint, , nodes must connected equipment node retrieval node. Indeed, filtering, nodes might connected single direction (called dead branch). thus ensure node path connects equipment site retrieval site. operation performed Breadth-first search (BFS) algorithm. duration operation strongly variable depending grid (resolution size), number stationary periods level contains static probability. graph returned list edges graph containing: s: source node (index 3d grid lat-lon-sta), t: target node (index 3d grid lat-lon-sta), gs: average ground speed required make transition (km/h) ps: static probability target node sz: size 3d grid lat-lon-sta equipement: node(s) first sta (index 3d grid lat-lon-sta) retrival: node(s) last sta (index 3d grid lat-lon-sta) flight_duration: list flight duration next sta hours lat: list static_prob latitude cell center lon: list static_prob longitude cell center extent: raster geographical extent `static_prob`` resolution: raster res static_prob temporal_extent: start end date time retrieved metadata static_prob finally need compute probability transition represented edge graph. use simple gamma distribution model probability groundspeed.","code":"grl <- graph_create(static_prob,   thr_prob_percentile = .99,   thr_gs = 150 # threshold km/h ) #>  [                                                  ] 0 / 763886  [                                                  ] 73 / 763886 | sta = 1/28 [=                                                 ] 21097 / 763886 | sta = 2/28 [===                                               ] 51913 / 763886 | sta = 3/28 [===                                               ] 52341 / 763886 | sta = 4/28 [===                                               ] 52637 / 763886 | sta = 5/28 [====                                              ] 65291 / 763886 | sta = 6/28 [====                                              ] 75380 / 763886 | sta = 7/28 [=====                                             ] 80572 / 763886 | sta = 8/28 [=======                                           ] 112340 / 763886 | sta = 9/28 [===========                                       ] 170822 / 763886 | sta = 10/28 [=============                                     ] 210026 / 763886 | sta = 11/28 [=============                                     ] 210752 / 763886 | sta = 12/28 [=============                                     ] 210764 / 763886 | sta = 13/28 [=============                                     ] 211152 / 763886 | sta = 14/28 [==============                                    ] 219106 / 763886 | sta = 15/28 [==============                                    ] 221566 / 763886 | sta = 16/28 [==============                                    ] 221686 / 763886 | sta = 17/28 [==============                                    ] 222714 / 763886 | sta = 18/28 [==============                                    ] 223742 / 763886 | sta = 19/28 [==============                                    ] 224722 / 763886 | sta = 20/28 [==========================                        ] 403082 / 763886 | sta = 21/28 [===============================================   ] 719034 / 763886 | sta = 22/28 [================================================= ] 754188 / 763886 | sta = 23/28 [================================================= ] 760992 / 763886 | sta = 24/28 [================================================= ] 761328 / 763886 | sta = 25/28 [================================================= ] 761408 / 763886 | sta = 26/28 [================================================= ] 763768 / 763886 | sta = 27/28 [==================================================] 763886 / 763886 | sta = 28/28 summary(grl) #>                 Length Class  Mode    #> s               642131 -none- numeric #> t               642131 -none- numeric #> gs              642131 -none- numeric #> ps              642131 -none- numeric #> sz                   3 -none- numeric #> equipement           1 -none- numeric #> retrival             1 -none- numeric #> flight_duration     29 -none- numeric #> lat                100 -none- numeric #> lon                 78 -none- numeric #> extent               1 Extent S4      #> resolution           2 -none- numeric #> temporal_extent     29 -none- list grl$p <- grl$ps * dgamma(grl$gs, shape = 7, scale = 7)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/basic-graph.html","id":"output-1-shortest-path","dir":"Articles","previous_headings":"","what":"Output 1: Shortest path","title":"Modeling trajectory with a graph","text":"graph theroy, shortest path correspond set nodes whose sum edges weights small possible. weighting edges minus log porbability, corresponds finding likely trajectory bird. solve problem igraph package","code":"g <- graph_from_data_frame(data.frame(   from = grl$s,   to = grl$t,   weight = -log(grl$p) )) sp <- shortest_paths(g, from = paste(grl$equipement), to = paste(grl$retrival)) # Convert igraph representation to lat-lon grl$shortest_path <- graph_path2lonlat(as.numeric(sp$vpath[[1]]$name), grl) leaflet() %>%   addTiles() %>%   addPolylines(lng = grl$shortest_path$lon, lat = grl$shortest_path$lat, opacity = 1, color = \"#808080\", weight = 3) %>%   addCircles(lng = grl$shortest_path$lon, lat = grl$shortest_path$lat, opacity = 1, color = \"#000\", weight = 10)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/basic-graph.html","id":"output-2-proability-map-of-stationary-period","dir":"Articles","previous_headings":"","what":"Output 2: Proability map of stationary period","title":"Modeling trajectory with a graph","text":"Estimating position bird stationary period generally sought-output tracking studies. Using graph built, can compute exactly (.e., without iterative approach MCMC). problem computing marginal distribution Markov process can solved mathematically.","code":"grl_marginal <- graph_marginal(grl) li_s <- list() l <- leaflet() %>% addTiles() for (i_r in seq_len(length(grl_marginal))) {   i_s <- metadata(static_prob[[i_r]])$sta_id   info <- metadata(static_prob[[i_r]])$temporal_extent   info_str <- paste0(i_s, \" | \", info[1], \"->\", info[2])   li_s <- append(li_s, info_str)   l <- l %>%     addRasterImage(grl_marginal[[i_r]], colors = \"OrRd\", opacity = 0.8, group = info_str) %>%     addCircles(lng = grl$shortest_path$lon[i_s], lat = grl$shortest_path$lat[i_s], opacity = 1, color = \"#000\", weight = 10, group = info_str) } l %>%   addLayersControl(     overlayGroups = li_s,     options = layersControlOptions(collapsed = FALSE)   ) %>%   hideGroup(tail(li_s, length(li_s) - 1))"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/basic-graph.html","id":"output-3-simulate-path","dir":"Articles","previous_headings":"","what":"Output 3: Simulate path","title":"Modeling trajectory with a graph","text":"","code":"path <- graph_simulation(grl) #>  [=                                                 ] 1 / 29  [===                                               ] 2 / 29  [=====                                             ] 3 / 29  [======                                            ] 4 / 29  [========                                          ] 5 / 29  [==========                                        ] 6 / 29  [============                                      ] 7 / 29  [=============                                     ] 8 / 29  [===============                                   ] 9 / 29  [=================                                 ] 10 / 29  [==================                                ] 11 / 29  [====================                              ] 12 / 29  [======================                            ] 13 / 29  [========================                          ] 14 / 29  [=========================                         ] 15 / 29  [===========================                       ] 16 / 29  [=============================                     ] 17 / 29  [===============================                   ] 18 / 29  [================================                  ] 19 / 29  [==================================                ] 20 / 29  [====================================              ] 21 / 29  [=====================================             ] 22 / 29  [=======================================           ] 23 / 29  [=========================================         ] 24 / 29  [===========================================       ] 25 / 29  [============================================      ] 26 / 29  [==============================================    ] 27 / 29  [================================================  ] 28 / 29  [==================================================] 29 / 29"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/gridded-gibbs.html","id":"introduction-and-background","dir":"Articles","previous_headings":"","what":"Introduction and background","title":"Sampling paths with a gridded Gibbs sampler","text":"Gibb’s sampler special case Metropolis hasting states Markov chains re-sampled iteratively conditional others, thus reducing probability sample conditional probability. full conditional probability known, can sampled exactly, resulting proposal always accepted traditional Metropolis Hasting framework. approach thus requires able compute probability map position one stationary period conditional previous next stationary period. bird trajectory model, conditional probability simple compute (1) static probability part (pressure light) dependent destination position can easily pre-computed map (see part 1) (2) transitional probability (.e., movement model) just based distance departure destination, can computed efficiently grid either departure destination known. implemented gridded gibbs approach following procedure: 1. Initial chain following path: - Create path highest probability static probability (light pressure) - Use known equipment/retrieval site first /last states path - stationary period shorter 24hours, interpolate position based position. 2. Loop stationary period produce new simulated path. stationay period, - Compute probability position conditional position bird previous next stationary period current path. conditional probability product (1) static probability pressure light current stationary period, (2) probability movement model based position previous stationary period previous flight duration (3) probability movement model based position next stationary period next flight duration (see Figure 7). - Update current state path position sampled probability map computed. gibbs samples presents several advantages compare traditional MH. First, accepting propostion, generally faster run. Second, simple implement easier setup step size necessary. Thirdly, can sample discontinuous probability space easily, thus allowing “jump” sea. However, Gibbs samples remains sensitive local minimun case consecutive states correlated. typically case several short flights follows long flight (e.g. pre-breeding stopover Lybia 18IC inFigure 8). next flight constrains much position, gibbs sampler explore correctly space.solved using block gibbs sampler, position stationary periods separated short flights re-sampled together.","code":"library(GeoPressureR) library(leaflet) library(raster) library(zoo)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/gridded-gibbs.html","id":"stationary-probability","dir":"Articles","previous_headings":"","what":"Stationary probability","title":"Sampling paths with a gridded Gibbs sampler","text":"already pre-processed light pressure data data vignette Preparing data. first normalize static probability (light pressure combine) ensure sum probabilities map 1. Instead considering grids cell map, pre-select grid cell stationary period possible according static probability . ‘Possible’ defined grid cells whose cumulative sum probability 99%.","code":"data(\"static_prob\", package = \"GeoPressureR\") static_prob_n <- lapply(static_prob, function(x) {   probt <- raster::as.matrix(x)   probt[is.na(probt)] <- 0   probt / sum(probt, na.rm = T) }) thr_prob_percentile <- .99 nds_id <- lapply(static_prob_n, function(probi) {   # First, compute the threshold of prob corresponding to percentile   probis <- sort(probi)   id_prob_percentile <- sum(cumsum(probis) <= (1 - thr_prob_percentile))   thr_prob <- probis[id_prob_percentile + 1]    # filter the pixels above the threashold   nds <- probi >= thr_prob   # return   which(nds) })"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/gridded-gibbs.html","id":"movement-model","dir":"Articles","previous_headings":"","what":"Movement Model","title":"Sampling paths with a gridded Gibbs sampler","text":"movement model, define function convert groundspeed [km/h] probability value. use standard gamma distribution. Note graph approach, use windspeed sot movement model defined airspeed. pre-compute position center grid cell. Extract flight duration metadata static_prob raster data. Create function compute distance point pt location grid id return probability bird flew distances particular stationary period i_s.","code":"mvt_pdf <- function(x) {   dgamma(x, shape = 7, scale = 7) } lat <- seq(raster::ymax(static_prob[[1]]), raster::ymin(static_prob[[1]]), length.out = nrow(static_prob[[1]]) + 1) lat <- lat[seq_len(length(lat) - 1)] + diff(lat[1:2]) / 2 lon <- seq(raster::xmin(static_prob[[1]]), raster::xmax(static_prob[[1]]), length.out = ncol(static_prob[[1]]) + 1) lon <- lon[seq_len(length(lon) - 1)] + diff(lon[1:2]) / 2  latlon <- expand.grid(lat = lat, lon = lon) flight_duration <- unlist(lapply(static_prob, function(x) {     mtf <- metadata(x)     as.numeric(sum(difftime(mtf$flight$end, mtf$flight$start, units = \"hours\")))   })) prob_mvt <- function(pt, i_s, id) {   gs <- geosphere::distGeo(latlon[pt, ], latlon[id, ]) / 1000 / flight_duration[i_s]   mvt_pdf(gs) }"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/gridded-gibbs.html","id":"initialize-the-path","dir":"Articles","previous_headings":"","what":"Initialize the path","title":"Sampling paths with a gridded Gibbs sampler","text":"Metropolis-hasting, need provide initial path sampler. , let’s set constant Initialize first path likely position stationary period Yet position unlikely reliable short stationary period. fix , linearly interpolate position short stationary period. first identify remove position short stationary period (<24hr). , slight tangent need set , set position first last stationary period (equipment retrieval) known site. Finally, can interpolate position latitude longitude separately using function na.approx zoo packages. elegant solution account difference flight duration. (Contact better solution ) Visualize initial path can set/get stationary period simulate","code":"nj <- 100 # number of iteration/samples nsta <- length(static_prob) # number of stationary period nll <- dim(static_prob[[1]])[1:2] # number of grid cell path <- matrix(ncol = nsta, nrow = nj) path[1, ] <- unlist(lapply(static_prob, function(x) {   which.max(as.matrix(x)) })) short_sta <- unlist(lapply(static_prob, function(x) {   tmp <- metadata(x)$extend_sample   abs(as.numeric(difftime(tmp[1], tmp[2], units = \"hours\"))) < 24 })) path[1, short_sta] <- NA path[, 1] <- which(as.matrix(static_prob[[1]]) == 1) path[, nsta] <- which(as.matrix(static_prob[[nsta]]) == 1) path_ll_1 <- arrayInd(path[1, ], nll) path_ll_1_inter <- round(zoo::na.approx(path_ll_1)) path[1, ] <- (path_ll_1_inter[, 2] - 1) * nll[1] + path_ll_1_inter[, 1] path_ll_1 <- arrayInd(path[1, ], nll) leaflet() %>%   addTiles() %>%   addPolylines(lng = lon[path_ll_1[, 2]], lat = lat[path_ll_1[, 1]], opacity = 1, color = \"#808080\", weight = 3) %>%   addCircles(lng = lon[path_ll_1[, 2]], lat = lat[path_ll_1[, 1]], opacity = 1, color = \"#000\", weight = 10) ss <- which(is.na(path[2, ]))"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/gridded-gibbs.html","id":"run-the-gibbs-sampler","dir":"Articles","previous_headings":"","what":"Run the Gibbs sampler","title":"Sampling paths with a gridded Gibbs sampler","text":"Now preparation done, can perform simulation simply iterating nj","code":"for (j in seq(from = 2, to = nj)) {   # Looping through the stationay period to simulate   for (i_s in ss) {     # get the probability from the position of the current path for the previous stationary period to all possible location of the current stationary period     prob_prev <- prob_mvt(path[j, i_s - 1], i_s - 1, nds_id[[i_s]])     # get the probability from all possible location of the current stationary period to the position of the previous path for the next stationary period     prob_next <- prob_mvt(path[j - 1, i_s + 1], i_s, nds_id[[i_s]])      # Compute the probability as the product of the static probability and the dynamic probability     prob <- static_prob_n[[i_s]][nds_id[[i_s]]] * prob_next * prob_prev      # Ransom sample a position according to the proability computed     path[j, i_s] <- nds_id[[i_s]][sum(stats::runif(1) > cumsum(prob) / sum(prob)) + 1]   } }"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/gridded-gibbs.html","id":"illustration","dir":"Articles","previous_headings":"","what":"Illustration","title":"Sampling paths with a gridded Gibbs sampler","text":"Illustration simulation 10 paths Compare simulated position stationary period corresponding static probability.","code":"m <- leaflet() %>% addTiles() for (i in seq(from = 50, to = nj, length.out = 10)) {   path_ll <- arrayInd(path[i, ], nll)   m <- m %>%     addPolylines(lng = lon[path_ll[, 2]], lat = lat[path_ll[, 1]], opacity = 0.7, weight = 1, color = \"#808080\") %>%     addCircles(lng = lon[path_ll[, 2]], lat = lat[path_ll[, 1]], opacity = 1, weight = 1, color = \"#000\") } m li_s <- list() l <- leaflet() %>% addTiles() for (i_r in seq_len(length(static_prob))) {   i_s <- metadata(static_prob[[i_r]])$sta_id   info <- metadata(static_prob[[i_r]])$extend_sample   info_str <- paste0(i_s, \" | \", info[1], \"->\", info[2])   li_s <- append(li_s, info_str)    path_ll <- arrayInd(path[, i_r], nll)   l <- l %>%     addRasterImage(static_prob[[i_r]], opacity = 0.8, colors = \"OrRd\", group = info_str) %>%     addCircles(lng = lon[path_ll[, 2]], lat = lat[path_ll[, 1]], opacity = .1, color = \"#000\", group = info_str) } l %>%   addLayersControl(     overlayGroups = li_s,     options = layersControlOptions(collapsed = FALSE)   ) %>%   hideGroup(tail(li_s, length(li_s) - 1))"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/labelling-tracks.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Labelling tracks","text":"important reason motivating manual editing pressure mapping relies precise activity pressure data. Activity labelling defines stationary periods flight duration. Short stationary periods can particularly hard define, expert knowledge essential. Since flight duration key input movement model, accurate flight duration critical correctly estimate distance traveled bird two stationary periods. pressure timeseries matching algorithm highly sensitive erroneously labeled pressure, even mislabeled datapoints can throw estimation map. species’ migration behaviour specific manual editing remains fastest option. can expect spend 30sec (e.g. Mangrove Kingfisher) 10min (e.g. Eurasian Nightjar) per track depending species’ migrating complexity. Manual editing also provides sense bird . learn bird moving (e.g. long continuous high altitude flight, short flights multiple days, alternation short migration flights stopovers, etc.). also provides sense uncertainty classification, useful understand interpret results. said, still worth starting manual editing automatically labeled timeseries. pam_classify() defines migratory flight activity hight long period. Refer possible classification methods PAMLr manual.","code":"pam_data <- pam_classify(pam_data, min_duration = 30) trainset_write(pam_data, pathname = system.file(\"extdata\", package = \"GeoPressureR\"), filename = \"18LX_act_pres-labeled-v1.csv\")"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/labelling-tracks.html","id":"basic-labelling-principles","dir":"Articles","previous_headings":"","what":"Basic labelling principles","title":"Labelling tracks","text":"procedure involves labelling (1) migratory activity 1 (2) identifying pressure datapoints discarded matching exercise 1. outcome activity labelling twofold: defined stationary periods, bird considered static relative size grid (~10-30km). start end stationary period used define pressure timeseries matched. defined flight duration, used movement model , indirectly, impact distance stationary periods. Labelling pressure allows deal situations bird changing altitude. Since reanalysis data matched provided ground level, geolocator’s pressure series single elevation therefore must discard data points different elevation.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/labelling-tracks.html","id":"introduction-to-trainset","dir":"Articles","previous_headings":"","what":"Introduction to TRAINSET","title":"Labelling tracks","text":"suggesting use TRAINSET, web based graphical tool labelling time series. can read TRAINSET www.trainset.geocene.com Github. tool interface quite intuitive. Start uploading .csv file (e.g., 18IC_act_pres.csv). View uploading file tips: Keyboard shortcuts can considerably speed navigation (zoom /, move left/right) labelling (add/remove label), specifically SHIFT. large number datapoints, keeping narrow temporal window avoid browser becoming slow irresponsive. can change “Reference Series” pressure see timeseries time helps interpret bird . Play y-axis range properly see small pressure variations may visible full range. TRAINSET offers flexibility label required: can add remove label values (bottom-right page). order trainset_read() work, change/edit/add label, simply use ones offered : 0 1.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/labelling-tracks.html","id":"four-tests-to-check-labelling","dir":"Articles","previous_headings":"","what":"Four tests to check labelling","title":"Labelling tracks","text":"assess quality labeling, can use script comprising four basic tests.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/labelling-tracks.html","id":"test-1-duration-of-stationary-periods-and-flights","dir":"Articles","previous_headings":"Four tests to check labelling","what":"Test 1: Duration of stationary periods and flights","title":"Labelling tracks","text":"first test consists checking duration flights stationary periods. may want check labelling flights shorter one hour well labelling stationary periods shorter couple hours. Using exact times table , can edit labelling TRAINSET export new version csv file. Note last row next_flight_duration 0 last stationary period.","code":"pam_data <- trainset_read(pam_data, system.file(\"extdata\", package = \"GeoPressureR\"), filename = \"18LX_act_pres-labeled-v1.csv\") pam_data <- pam_sta(pam_data) pam_data$sta$duration <- pam_data$sta$end - pam_data$sta$start pam_data$sta$next_flight_duration <- c(0, difftime(tail( pam_data$sta$start, length( pam_data$sta$start)-1), head( pam_data$sta$end, length( pam_data$sta$end)-1),units = \"hours\")) knitr::kable(pam_data$sta[difftime(pam_data$sta$end, pam_data$sta$start, units = \"mins\") < 60 | pam_data$sta$next_flight_duration < 30, ])"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/labelling-tracks.html","id":"test-2-pressure-timeseries","dir":"Articles","previous_headings":"Four tests to check labelling","what":"Test 2: Pressure timeseries","title":"Labelling tracks","text":"second check carry computing map visualize pressure timeseries grouping stationary periods. Ploting figure Plotly allows zoom-pan check timeseries correctly grouped. Make sure stationary period include pressure measurement flight (e.g. 1-Sep-2017 figure ). might spot anomalies temporal variation pressure. cases, can already label pressure timeseries remove .","code":"pam_data <- trainset_read(pam_data, system.file(\"extdata\", package = \"GeoPressureR\"), filename = \"18LX_act_pres-labeled-v2.csv\") pam_data <- pam_sta(pam_data)  p <- ggplot() +   geom_line(data = pam_data$pressure, aes(x = date, y = obs), col = \"grey\") +   geom_line(     data = subset(pam_data$pressure, sta_id != 0),     aes(x = date, y = obs, col = as.factor(sta_id))   ) +   theme_bw() +   scale_colour_manual(values = rep(RColorBrewer::brewer.pal(9, \"Set1\"), times = 4)) # scale_colour_brewer(type=\"qualitative\", palette = 'Set1')  ggplotly(p, dynamicTicks = T) %>%   layout(     showlegend = F,     legend = list(orientation = \"h\", x = -0.5),     yaxis = list(title = \"Pressure [hPa]\")   )"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/labelling-tracks.html","id":"test-3-pressure-timeseries-match","dir":"Articles","previous_headings":"Four tests to check labelling","what":"Test 3: Pressure timeseries match","title":"Labelling tracks","text":"far, checked pressure timeseries correctly labeled respective stationary periods look relatively smooth. stage, timeseries good enough matched reanalyisis data. third test consists finding location best match comparing pressure timeseries. allows distinguish bird movements natural variations pressure. far difficult step, multiple iterations necessary achieve best results. computation can take time, recommend starting long stationary periods, results satisfying, moving shorter periods. can estimate probability map stationary period: stationary period, locate best match query pressure timeseries geopressure_ts() location. get errors, check probability map best match (see commented line starting leaflet()) can now look similar figure pressure timeseries, time comparing geolocator data best match reanalysis data. can use figure identify periods mismatch indicates problem labelling. Often, indicate bird changing altitude. happens regularly migration, bird lands one location performs one two short flights morning, resulting change altitude. Activity data TRAINSET can also help understand bird . example, removing pressure datapoints can improve match, especially short stopover (e.g. 2017-9-11). See final labeled file.","code":"pam_data <- trainset_read(pam_data, system.file(\"extdata\", package = \"GeoPressureR\"), filename = \"18LX_act_pres-labeled-v3.csv\") pam_data <- pam_sta(pam_data)  sta_id_keep <- pam_data$sta$sta_id[difftime(pam_data$sta$end, pam_data$sta$start, units = \"hours\") > 12] pam_data$pressure$sta_id[!(pam_data$pressure$sta_id %in% sta_id_keep)] <- NA message(\"Number of stationay period to query: \", length(sta_id_keep)) pressure_maps <- geopressure_map(pam_data$pressure, extent = c(50, -16, 0, 23), scale = 10, max_sample = 100) pressure_prob <- geopressure_prob_map(pressure_maps) pressure_timeserie <- list() for (i_r in seq_len(length(pressure_prob))) {   i_s <- metadata(pressure_prob[[i_r]])$sta_id    # find the position with the highest probability   tmp <- as.data.frame(pressure_prob[[i_r]], xy = T)   lon <- tmp$x[which.max(tmp[, 3])]   lat <- tmp$y[which.max(tmp[, 3])]    # Visual check   # library(leaflet)   # leaflet() %>% addTiles() %>% addRasterImage(pressure_prob[[i_r]]) %>% addMarkers(lat=lat,lng=lon)    # Subset the pressure timeserie for the period of the current stationary period   pam_pressure_sta <- subset(pam_data$pressure, sta_id == i_s)    # query the pressure at this location   message(\"query:\", i_r, \"/\", length(pressure_prob))   pressure_timeserie[[i_r]] <- geopressure_ts(lon,     lat,     pressure = pam_pressure_sta   )   # Add sta_id   pressure_timeserie[[i_r]][\"sta_id\"] <- i_s    # Remove mean   pressure_timeserie[[i_r]]$pressure0 <- pressure_timeserie[[i_r]]$pressure - mean(pressure_timeserie[[i_r]]$pressure) + mean(pam_pressure_sta$obs[!pam_pressure_sta$isoutliar]) } p <- ggplot() +   geom_line(data = pam_data$pressure, aes(x = date, y = obs), colour = \"grey\") +   geom_point(data = subset(pam_data$pressure, isoutliar), aes(x = date, y = obs), colour = \"black\") +   geom_line(data = do.call(\"rbind\", pressure_timeserie), aes(x = date, y = pressure0, col = as.factor(sta_id))) +   theme_bw() +   scale_colour_manual(values = rep(RColorBrewer::brewer.pal(9, \"Set1\"), times = 4))  ggplotly(p, dynamicTicks = T) %>%   layout(     showlegend = F,     legend = list(orientation = \"h\", x = -0.5),     yaxis = list(title = \"Pressure [hPa]\")   ) pam_data <- trainset_read(pam_data, system.file(\"extdata\", package = \"GeoPressureR\"), filename = \"18LX_act_pres-labeled.csv\") pam_data <- pam_sta(pam_data)  p <- ggplot() +   geom_line(data = pam_data$pressure, aes(x = date, y = obs), colour = \"grey\") +   geom_point(data = subset(pam_data$pressure, isoutliar), aes(x = date, y = obs), colour = \"black\") +   geom_line(data = do.call(\"rbind\", pressure_timeserie), aes(x = date, y = pressure0, col = as.factor(sta_id))) +   theme_bw() +   scale_colour_manual(values = rep(RColorBrewer::brewer.pal(9, \"Set1\"), times = 4))  ggplotly(p, dynamicTicks = T) %>%   layout(     showlegend = F,     legend = list(orientation = \"h\", x = -0.5),     yaxis = list(title = \"Pressure [hPa]\")   )"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/labelling-tracks.html","id":"test-4-histogram-of-pressure-error","dir":"Articles","previous_headings":"Four tests to check labelling","what":"Test 4: Histogram of pressure error","title":"Labelling tracks","text":"Finally, can also look histogram pressure error (geolocator-ERA5). long stationary periods (5 days), want check single mode distribution. Two modes indicate bird spending time two different altitudes. usual birds day site night roost different elevations. might also want check spread distribution. value can guide setting standard deviation parameter s geopressure_prob_map().","code":"par(mfrow = c(5, 6), mar = c(1, 1, 3, 1)) for (i_r in seq_along(pressure_timeserie)) {   i_s <- unique(pressure_timeserie[[i_r]]$sta_id)   df3 <- merge(pressure_timeserie[[i_r]], subset(pam_data$pressure, !isoutliar & sta_id == i_s), by = \"date\")   df3$error <- df3$pressure0 - df3$obs   hist(df3$error, main = i_s, xlab = \"\", ylab = \"\")   abline(v = 0, col = \"red\") }"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/labelling-tracks.html","id":"common-challenges-and-tips-to-address-them","dir":"Articles","previous_headings":"","what":"Common challenges and tips to address them","title":"Labelling tracks","text":"following section, use examples illustrate common challenges may encountered manual editing, offer suggestions address .","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/labelling-tracks.html","id":"outliars-during-flights-due-to-low-bird-activity","dir":"Articles","previous_headings":"Common challenges and tips to address them","what":"Outliars during flights due to low bird activity","title":"Labelling tracks","text":"flight, single activity measurements can display low activity due e.g. short gliding flights flapping. automatic labelling activity KNN classifier may mislabel points stationary periods, illustrated example night 31st August. single mislabeled point can incorrectly split flight multiple short flights. error highlighted Test #1 described . However, birds may also display lower activity beginning end flight, often misclassified, illustrated three nights example picked Test #1.  However, low activity happens well bird reaches ground, illustrated example , low pressure measurement flight included stationary period. error can sometimes pick-Test #2. Yet worth checking flights activity assess case--case basis whether datapoints included flight .","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/labelling-tracks.html","id":"importance-of-zooming-in-before-editing-outliers","dir":"Articles","previous_headings":"Common challenges and tips to address them","what":"Importance of zooming in before editing outliers","title":"Labelling tracks","text":"Anomalies pressure timeseries might obvious first sight.  Zooming narrower pressure range helps understand happening. example, Tawny Pipit breeding near mine site rough topography. breeding, looks like staying relatively constant elevation, sudden drop pressure towards end indicates bird changed altitude.  cases, aim discard pressure datapoints recorded bird different altitude. may always obvious distinguish temporal variation pressure bird actually changes altitude. suggest keeping datapoints confident (, first part timeseries ) running Test #3.  long timeseries one, Test #3 easily pick right location timeseries want match. can simply de-select datapoints end timeseries fit ERA5 green line. shorter timeseries, might need several iterations pick correct match.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/labelling-tracks.html","id":"short-stationary-halts-between-flights","dir":"Articles","previous_headings":"Common challenges and tips to address them","what":"Short stationary halts between flights","title":"Labelling tracks","text":"Interpreting bird behaviour defining stationary periods can difficult, example birds extend migration day lower intensity, end flight clear.  cases, bird stops couple hours seems active . low-intensity migratory movement, short break followed migratory flight, landing stopover location, relocating early morning light.  question whether label halts stationary periods . Referring pressure timeseries can help assess whether bird changes location. example, low activity followed high activity accompanied pressure change, can consider bird changed location, label low activity stationary period. However, bird may also land complete local flights within stopover location (little pressure variation), case want avoid creating two different stationary periods. Test #3 helps ensure local vertical movements took place.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/labelling-tracks.html","id":"mountainous-species","dir":"Articles","previous_headings":"Common challenges and tips to address them","what":"Mountainous species","title":"Labelling tracks","text":"Mountainous species display specific behaviour regular altitudinal changes. clear Ring Ouzel’s timeseries, displays daily occurring movements, though regular enough make process automatic, sometimes changing altitude. scale, difficult assess temporal variation pressure, 790hPa 900hPa pressure level might work, difficult know points discard. point can help zoom time axis see whether certain elevation seems common. proceed iteratively keep datapoints elevation. Test #4 useful ensure forget points.   Eurasian Hoopoe presents challenge moves continuously throughout day, showing sinosoidal pattern. challenging case distinguishing temporal variation altitudinal change difficult. Several iterations lead relatively smooth pressure timeseries. Note order estimate uncertainty correctly cases, standard deviation s increased. Thankfully, behaviour restricted breeding ground.  cases, finding single timeseries impossible, wintering site Ring Ouzel, never returning elevation. cases, discard entire timeseries use mask absolute pressure values.  Luckily, definition mountainous species live specific areas, restricts possible locations. case, based previous stationary periods can establish bird Morocco, low pressure (.e. high elevation), Atlas mountains fit pressure mask.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/labelling-tracks.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Labelling tracks","text":"View full screen","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/labelling-tracks.html","id":"future-improvements","dir":"Articles","previous_headings":"","what":"Future improvements","title":"Labelling tracks","text":"lot can done improve process: Run TRAINSET offline Bypass create/upload/read csv running browser session directly R Build R (shiny) equivalent TRAINSET directly integrated R package, unable find good package label points Figure R, maintain , TRAINSET free. suggestions? Write issue Gitub","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/light-map.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Creating probability maps from light data","text":"first step define basic information calibration period location. second calibration short (1 day) discard example. read pam data retrieved geolocator.","code":"library(GeoPressureR) library(leaflet) library(MASS) library(raster) lon_calib <- 17.05 lat_calib <- 48.9 tm_calib_1 <- c(as.POSIXct(\"2017-06-20\"), as.POSIXct(\"2017-07-20\")) # tm_calib_2 <- c(as.POSIXct(\"2018-04-29\"), as.POSIXct(\"2018-05-1\")) pam_data <- pam_read(   pathname = system.file(\"extdata\", package = \"GeoPressureR\"),   crop_start = \"2017-06-20\", crop_end = \"2018-05-02\" )"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/light-map.html","id":"twilight-annotation","dir":"Articles","previous_headings":"","what":"Twilight Annotation","title":"Creating probability maps from light data","text":"twilight annotation closely follows chapter 4 geolocation manual addition manual editing TRAINSET. find time twilight change timezone UTC. manual editing easily performed TRAINSET. case, must label datapoints want delete label name make sure assign label datapoints want keep (left black dots). Read TRAINSET labelling dedicated vignette: label tracks. First, write csv file, open edit TRAINSET, finally export new csv file. read exported csv file update Deleted field twl.","code":"twl <- find_twilights(pam_data$light,   threshold = min(pam_data$light$obs[pam_data$light$obs > 0]), # first light of the day   include = \"2017-09-23 00:00:00 UTC\" # Not sure why ) attr(twl$twilight, \"tzone\") <- \"UTC\" write.csv(   data.frame(     series = ifelse(twl$rise, \"Rise\", \"Set\"),     timestamp = strftime(twl$twilight, \"%Y-%m-%dT00:00:00Z\", tz = \"UTC\"),     value = as.numeric(format(twl$twilight, \"%H\")) * 60 + as.numeric(format(twl$twilight, \"%M\")),     label = ifelse(is.null(twl$delete), \"\", ifelse(twl$delete, \"Delete\", \"\"))   ),   paste0(system.file(\"extdata\", package = \"GeoPressureR\"), \"/18LX_light.csv\"),   row.names = FALSE ) browseURL(\"https://trainset.geocene.com/\") csv <- read.csv(paste0(system.file(\"extdata\", package = \"GeoPressureR\"), \"/18LX_light-labeled.csv\")) twl$deleted <- !csv$label == \"\""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/light-map.html","id":"calibration","dir":"Articles","previous_headings":"","what":"Calibration","title":"Creating probability maps from light data","text":"Instead calibrating twilight errors terms duration, directly model zenith angle error. First, retrieve twilight calibration period. compute zenith angle (.e., elevation sun) twilight time calibration site. fit simple gamma distribution.","code":"twl_calib <- subset(twl, !deleted & twilight >= tm_calib_1[1] & twilight <= tm_calib_1[2]) sun <- solar(twl_calib$twilight) z <- refracted(zenith(sun, lon_calib, lat_calib)) fit_e <- fitdistr(z, \"gamma\") hist(z, freq = F) z_axes <- seq(90, 100, 0.1) lines(z_axes, dgamma(z_axes, fit_e$estimate[\"shape\"], fit_e$estimate[\"rate\"]), col = \"red\")"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/light-map.html","id":"stationary-period","dir":"Articles","previous_headings":"","what":"Stationary period","title":"Creating probability maps from light data","text":"computing probability map, group twilights stationary period using activity data. Learn step vignette Pressure Map.","code":"pam_data <- trainset_read(pam_data, pathname = system.file(\"extdata\", package = \"GeoPressureR\")) pam_data <- pam_sta(pam_data) twilight_sta_id <- sapply(twl$twilight, function(x) which(pam_data$sta$start < x & x < pam_data$sta$end)) twilight_sta_id[sapply(twilight_sta_id, function(x) length(x) == 0)] <- 0 twl$sta_id <- unlist(twilight_sta_id)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/light-map.html","id":"probability-map","dir":"Articles","previous_headings":"","what":"Probability map","title":"Creating probability maps from light data","text":"first define grid compute probabilities. ease comparison pressure-derived map, load grid size resolution pressure_prob (computed vignette Pressure Map) Selecting unlabelled twilights, compute probability observing zenith angle twilight using calibrated error function grid cell. Aggregating probability map twilight per stationary period requires assumptions independence/correlation twilight errors. Read vignette Probability-aggregation). , use log-linear pooling weight \\(w=0.1\\), loop stationary period create raster map aggregated probabilities. Finally, can visualize probability map stationary period. can export data generated.","code":"data(\"pressure_prob\", package = \"GeoPressureR\") g <- as.data.frame(pressure_prob[[1]], xy = TRUE) g$layer <- NA twl_clean <- subset(twl, !deleted) sun <- solar(twl_clean$twilight) pgz <- apply(g, 1, function(x) {   z <- refracted(zenith(sun, x[1], x[2]))   dgamma(z, fit_e$estimate[\"shape\"], fit_e$estimate[\"rate\"]) }) w <- 0.1 light_prob <- c() for (i_s in seq_len(nrow(pam_data$sta))) {   id <- twl_clean$sta_id == pam_data$sta$sta_id[i_s]   if (sum(id) > 1) {     g$layer <- exp(colSums(w * log(pgz[id, ]))) # Log-linear equation express in log   } else if (sum(id) == 1) {     g$layer <- pgz[id, ]   } else {     g$layer <- 1   }   gr <- rasterFromXYZ(g)   crs(gr) <- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"   metadata(gr) <- list(     sta_id = pam_data$sta$sta_id[i_s],     nb_sample = sum(id)   )   light_prob[[i_s]] <- gr } li_s <- list() l <- leaflet() %>% addTiles() for (i_r in seq_len(length(light_prob))) {   i_s <- metadata(light_prob[[i_r]])$sta_id   info <- pam_data$sta[pam_data$sta$sta_id == i_s, ]   info_str <- paste0(i_s, \" | \", info$start, \"->\", info$end)   li_s <- append(li_s, info_str)   l <- l %>% addRasterImage(light_prob[[i_r]], opacity = 0.8, colors = \"OrRd\", group = info_str) } l %>%   addCircles(lng = lon_calib, lat = lat_calib, color = \"black\", opacity = 1) %>%   addLayersControl(     overlayGroups = li_s,     options = layersControlOptions(collapsed = FALSE)   ) %>%   hideGroup(tail(li_s, length(li_s) - 1)) usethis::use_data(light_prob, overwrite = T)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/preparing-data.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Preparing data for trajectory modelling","text":"Start loading light pressure data computed respective vignettes Light map Pressure map.","code":"data(\"pressure_prob\", package = \"GeoPressureR\") data(\"light_prob\", package = \"GeoPressureR\") pam_data <- pam_read(   pathname = system.file(\"extdata\", package = \"GeoPressureR\"),   crop_start = \"2017-06-20\", crop_end = \"2018-05-02\" ) pam_data <- trainset_read(pam_data, pathname = system.file(\"extdata\", package = \"GeoPressureR\")) pam_data <- pam_sta(pam_data)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/preparing-data.html","id":"combine-pressure-and-light-probability-maps","dir":"Articles","previous_headings":"","what":"Combine pressure and light probability maps","title":"Preparing data for trajectory modelling","text":"step, need retrieve pressure light data stationary period. three sources data overlap, last one (sta_id_keep) can choose include part data. mentioned , easier start filtering longer stationary periods, reduce threshold stopover duration. need keep flights stationary period separate can estimate wind support correctly. compute static probability product light pressure probability maps, add flight duration metadata. overwrite probability first last stationary periods known location equipment/retrieval sites.","code":"sta_pres <- unlist(lapply(pressure_prob, function(x) raster::metadata(x)$sta_id)) sta_light <- unlist(lapply(light_prob, function(x) raster::metadata(x)$sta_id)) sta_thres <- pam_data$sta$sta_id[difftime(pam_data$sta$end, pam_data$sta$start, units = \"hours\") > 0] # Get the sta_id present on all three data sources sta_id_keep = intersect(intersect(sta_pres,sta_light),sta_thres) # Filter pressure and light map pressure_prob <- pressure_prob[sta_pres %in% sta_id_keep] light_prob <- light_prob[sta_light %in% sta_id_keep] flight = list() for (i_f in seq_len(length(sta_id_keep)-1)){   from_sta_id <- sta_id_keep[i_f]   to_sta_id <- sta_id_keep[i_f+1]   flight[[i_f]] <- list(     start = pam_data$sta$end[seq(from_sta_id,to_sta_id-1)],     end = pam_data$sta$start[seq(from_sta_id+1,to_sta_id)],     sta_id = seq(from_sta_id,to_sta_id-1)   ) } flight[[i_f+1]]=list() static_prob <- mapply(function(light, pressure, flight) {   # define static prob as the product of light and pressure prob   static_prob <- light * pressure      # replace na by zero   # tmp <- values(static_prob)   # tmp[is.na(tmp)] <- 0   # values(static_prob) <- tmp      # define metadata   metadata(static_prob) <- metadata(pressure)   metadata(static_prob)$flight <- flight      # return   static_prob }, light_prob, pressure_prob, flight) lon_calib <- 17.05 lat_calib <- 48.9  lat <- seq(raster::ymax(static_prob[[1]]), raster::ymin(static_prob[[1]]), length.out = nrow(static_prob[[1]]) + 1) lat <- lat[seq_len(length(lat) - 1)] + diff(lat[1:2]) / 2 lon <- seq(raster::xmin(static_prob[[1]]), raster::xmax(static_prob[[1]]), length.out = ncol(static_prob[[1]]) + 1) lon <- lon[seq_len(length(lon) - 1)] + diff(lon[1:2]) / 2  lon_calib_id <- which.min(abs(lon_calib - lon)) lat_calib_id <- which.min(abs(lat_calib - lat))  tmp <- as.matrix(static_prob[[1]]) tmp[!is.na(tmp)] <- 0 tmp[lat_calib_id, lon_calib_id] <- 1 values(static_prob[[1]]) <- tmp  tmp <- as.matrix(static_prob[[length(static_prob)]]) tmp[!is.na(tmp)] <- 0 tmp[lat_calib_id, lon_calib_id] <- 1 values(static_prob[[length(static_prob)]]) <- tmp"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/preparing-data.html","id":"checking-model-input","dir":"Articles","previous_headings":"","what":"Checking model input","title":"Preparing data for trajectory modelling","text":"section, look checks perform moving modelling step.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/preparing-data.html","id":"check-1-presence-of-at-least-one-position","dir":"Articles","previous_headings":"Checking model input","what":"Check 1: Presence of at least one position","title":"Preparing data for trajectory modelling","text":"first easy check least one location probability greater 1 stationary period.","code":"for (i_s in seq_len(length(static_prob))) {   if (sum(values(static_prob[[i_s]]), na.rm = T) == 0) {     stop(paste(\"Probability map of stationary period\", i_s, \"is null. Check part 1 process (light and pressure)\", sep = \" \"))   } }"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/preparing-data.html","id":"check-2-presence-of-at-least-one-transition","dir":"Articles","previous_headings":"Checking model input","what":"Check 2: Presence of at least one transition","title":"Preparing data for trajectory modelling","text":"Secondly, check always least one possible transition one stationary period next.","code":"for (i_s in seq_len(length(static_prob) - 1)) {   cur <- as.matrix(static_prob[[i_s]]) > 0   cur[is.na(cur)] <- F   nex <- as.matrix(static_prob[[i_s + 1]]) > 0   nex[is.na(nex)] <- F      mtf <- metadata(static_prob[[i_s]])   flight_duration <- as.numeric(sum(difftime(mtf$flight$end,mtf$flight$start,unit=\"hours\"))) # hours   resolution <- mean(res(static_prob[[1]])) * 111 # assuming 1°= 111km   thr_gs <- 150 # Assuming a max groundspeed of 150km/h    # Check possible position at next stationary period   possible_next <- (EBImage::distmap(!cur) * resolution / flight_duration) < thr_gs    if (sum(possible_next & nex) == 0) {     stop(paste(\"There are no possible transition from stationary period\", i_s, \"to\", i_s + 1, \". Check part 1 process (light and pressure)\", sep = \" \"))   } }"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/preparing-data.html","id":"check-3-visual-inspection","dir":"Articles","previous_headings":"Checking model input","what":"Check 3: Visual inspection","title":"Preparing data for trajectory modelling","text":"third check important yet also complex. check probability map coherent flight distance previous location. distance computed based assumed average groundspeed. Birds can fly groundspeed 120-150 km/h (wind support) although usual average around 40km/h. iteratively plot likely position (black dot) based static probability contained within flight distance previous likely position (green dot). Note following key elements correctly understand figure. Firstly, birds can fly zig-zag patterns, meaning total distance possible (green circle) might greater actual distance previous stationary period (distance green black). Secondly, visualization accounts lag-1 movement, thus chooses likely position (black dot) independently overall coherence trajectory. typically happens short stationary periods pressure match slightly better different place bird went. thoses cases visualization wrong location (e.g., sending bird north migrating south), try see can draw path seems coherent. example use , happens stationary period 14. Great Reed Warbler moving south towards Burkina Faso Ghana, slightly likely position occurs Algeria. worth checking pressure timeseries see whether manual editing change . animated figures might helpful .","code":"li_s <- list() l <- leaflet() %>% addTiles() speed_thr = 100 for (i_r in seq_len(length(static_prob))) {   mt <- metadata(static_prob[[i_r]])      if ( i_r > 1 ){     mtf <- metadata(static_prob[[i_r-1]])     flight_duration <- as.numeric(sum(difftime(mtf$flight$end,mtf$flight$start,unit=\"hours\")))     info_str <- paste0(mt$sta_id, \" | \", mt$temporal_extent[1], \"->\", mt$temporal_extent[2], \" | \",flight_duration)     max_dist <- flight_duration*speed_thr*1000   } else{     info_str <- paste0(mt$sta_id, \" | \", mt$temporal_extent[1], \"->\", mt$temporal_extent[2])   }        l <- l %>%      addRasterImage(static_prob[[i_r]], opacity = 0.8, colors = \"OrRd\", group = info_str) %>%      addCircles(lng = lon_calib, lat = lat_calib, opacity = 1, color = \"red\", weight = 10, group = info_str)      tmp <- as.data.frame(static_prob[[i_r]], xy = T)    if ( i_r > 1 ){     l <- l %>%        addCircles(lng = lon0, lat = lat0, opacity = 1, color = \"green\", weight = 10, group = info_str) %>%        addCircles(lng = lon0, lat = lat0, opacity = 1, color = \"green\", radius = max_dist, group = info_str, fillOpacity=0, weight = 2)     id <- geosphere::distGeo(c(lon0, lat0), cbind(tmp$x,tmp$y)) > max_dist     tmp$layer[id] <- 0   }      # find the max value of probability   lon <- tmp$x[which.max(tmp$layer)]   lat <- tmp$y[which.max(tmp$layer)]      l <- l %>%     addCircles(lng = lon, lat = lat, opacity = 1, color = \"black\", weight = 10, group = info_str)      lon0 <- lon   lat0 <- lat   li_s <- append(li_s, info_str) }  l %>%   addLayersControl(     overlayGroups = li_s,     options = layersControlOptions(collapsed = FALSE)   ) %>%   hideGroup(tail(li_s, length(li_s) - 1)) library(gifski) raster::animate(brick(static_prob), n = 1) library(ggplot2) library(gganimate) dfb <- do.call(\"rbind\", lapply(static_prob, function(x) {   mt <- metadata(x)   df <- as.data.frame(x, xy = T)   df$sta_id <- mt$sta_id   df$extend_sample <- mt$extend_sample   df$next_flight_duration <- mt$next_flight_duration   df }))  dfb %>%   ggplot() +   geom_raster(aes(x = x, y = y, fill = layer)) +   transition_time(sta_id)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/preparing-data.html","id":"export-static-probability","dir":"Articles","previous_headings":"","what":"Export static probability","title":"Preparing data for trajectory modelling","text":"can useful first run model downscale map improve computational costs. necessary example. Now checks completed, can export data generated start modeling, outlined vignette Basic graph.","code":"static_prob <- lapply(static_prob, function(raster) {   raster_ds <- aggregate(raster, fact = 1, fun = max, na.rm = T, expand = T)   # keep metadata   metadata(raster_ds) <- metadata(raster)   # return   raster_ds }) usethis::use_data(static_prob, overwrite = T)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/pressure-map.html","id":"preparing-the-data","dir":"Articles","previous_headings":"","what":"Preparing the data","title":"Creating probability maps from pressure data","text":"start, install GeoPressureR package Github using following line: using following libraries:","code":"devtools::install_github(\"Rafnuss/GeoPressureR\") library(GeoPressureR) library(raster) library(leaflet) library(ggplot2) library(plotly) library(RColorBrewer)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/pressure-map.html","id":"reading-geolocator-data","dir":"Articles","previous_headings":"Preparing the data","what":"Reading geolocator data","title":"Creating probability maps from pressure data","text":"example, use data captured Great Reed Warbler Acrocephalus arundinaceus (18LX). , read geolocator data crop starts equipment date ends retrieval date.","code":"pam_data <- pam_read(   pathname = system.file(\"extdata\", package = \"GeoPressureR\"),   crop_start = \"2017-06-20\", crop_end = \"2018-05-02\" )"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/pressure-map.html","id":"automatic-classification-of-activity","dir":"Articles","previous_headings":"Preparing the data","what":"Automatic classification of activity","title":"Creating probability maps from pressure data","text":"use k-mean clustering group periods low high activity. classify high activities lasting 30 minutes migratory activities. See possible classifications described PALMr manual.","code":"pam_data <- pam_classify(pam_data, min_duration = 30)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/pressure-map.html","id":"editing-activity-on-trainset","dir":"Articles","previous_headings":"Preparing the data","what":"Editing activity on TRAINSET","title":"Creating probability maps from pressure data","text":"ensure high level precision needed pressure match, must manually edit activity classification pressure timeseries matched. suggest TRAINSET. separate vignette dedicated exercise, including best practices sample code get started, available . Use trainset_write() export automatically generated classifications csv file, can opened TRAINSET: https://trainset.geocene.com/. Printscreen manual classification TRAINSET. See labelling track vignette information. finished manual editing, export new csv file (TRAINSET add -labeled name). Make sure keep classification file (e.g. /data/). edit existing file, re-open file TRAINSET read file directly trainset_read().","code":"trainset_write(pam_data, pathname = system.file(\"extdata\", package = \"GeoPressureR\")) # browseURL(\"https://trainset.geocene.com/\") pam_data <- trainset_read(pam_data, pathname = system.file(\"extdata\", package = \"GeoPressureR\"))"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/pressure-map.html","id":"identifying-stationary-periods","dir":"Articles","previous_headings":"Preparing the data","what":"Identifying stationary periods","title":"Creating probability maps from pressure data","text":"Based activity labeling, pam_sta() creates table stationary periods illustrated . can visualize pressure measurements grouped stationary period (symbolized different color).","code":"pam_data <- pam_sta(pam_data) knitr::kable(head(pam_data$sta)) p <- subset(pam_data$pressure, sta_id != 0) %>%   ggplot() +   geom_line(data = pam_data$pressure, aes(x = date, y = obs), col = \"grey\") +   geom_line(aes(x = date, y = obs, col = as.factor(sta_id))) +   geom_point(data = subset(pam_data$pressure, isoutliar), aes(x = date, y = obs), colour = \"black\") +   theme_bw() +   scale_y_continuous(name = \"Pressure(hPa)\") +   scale_colour_manual(values = rep(RColorBrewer::brewer.pal(9, \"Set1\"), times = 4)) # scale_colour_brewer(type=\"qualitative\", palette = 'Set1')  ggplotly(p, dynamicTicks = T) %>%   layout(     showlegend = F,     legend = list(orientation = \"h\", x = -0.5),     yaxis = list(title = \"Pressure [hPa]\")   )"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/pressure-map.html","id":"computing-the-map-of-pressure","dir":"Articles","previous_headings":"","what":"Computing the map of pressure","title":"Creating probability maps from pressure data","text":"Now clean pressure timeseries stationary period, ready match one atmospheric pressure data (ERA5). overcome challenge computing mismatch large dataset, R package uses API GeoPressure perform computation Google Earth Engine. Read API . Initially, easier faster query long stationary periods (example , select periods longer 12hrs). can setting pressure stationary periods wish discard NA. can now query data API geopressure_map(). detailed description parameters can found . take couple minutes run. geopressure_map() returns list two rasters stationary periods. first mean square error (\\(\\textbf{MSE}\\)) pressure timeseries ERA5 map. second (\\(\\textbf{z}_{thr}\\)) proportion datapoints pressure timeseries correspond altitude falls min max altitude grid cell. Read values computed . combine two rasters single probability map using \\[\\textbf{P} = \\exp \\left(-w \\frac{\\textbf{MSE}}{s} \\right) [\\textbf{z}_{thr}>thr]\\] \\(s\\) standard deviation pressure \\(thr\\) threshold mask. auto-correlation timeseries accounted equation, use log-linear pooling weight \\(w=\\log(n) - 1\\), \\(n\\) number datapoints timeseries. operation described publication […]. Another vignette describing influence log-linear pooling length timeseries added later. use leaflet() visualize threshold mask, mismatch map, overall probability map single stationary period. can also visualize probability map stationary periods:","code":"sta_id_keep <- pam_data$sta$sta_id[difftime(pam_data$sta$end, pam_data$sta$start, units = \"hours\") > 0] pam_data$pressure$sta_id[!(pam_data$pressure$sta_id %in% sta_id_keep)] <- NA extent <- c(50, -16, 0, 23) # coordinates of the map to request (N, W, S, E) scale <- 2 # request on a 1/2=0.5° grid to make the code faster max_sample <- 250 # limit the query to the first 250 datapoints. margin <- 30 # roughly equivalent to 3hPa pressure_maps <- geopressure_map(pam_data$pressure, extent = extent, scale = scale, max_sample = max_sample, margin = margin) usethis::use_data(pressure_maps, overwrite = T) s <- 0.4 # standard deviation of pressure thr <- 0.9 # threshold of the threshold proportion value acceptable pressure_prob <- geopressure_prob_map(pressure_maps, s = s, thr = thr) usethis::use_data(pressure_prob, overwrite = T) i_r <- 2 leaflet() %>%   addTiles() %>%   addRasterImage(pressure_prob[[i_r]], opacity = 0.8, colors = \"OrRd\", group = \"Probability\") %>%   addRasterImage(pressure_maps[[i_r]][[1]], opacity = 0.8, colors = \"OrRd\", group = \"Mismatch\") %>%   addRasterImage(pressure_maps[[i_r]][[2]], opacity = 0.8, colors = \"OrRd\", group = \"Threashold\") %>%   # addLegend(pal = pal, values = values(v[[i_s]][[3]]), title = \"Probability\") %>%   addLayersControl(     overlayGroups = c(\"Probability\", \"Mismatch\", \"Threashold\"),     options = layersControlOptions(collapsed = FALSE)   ) %>%   hideGroup(c(\"Mismatch\", \"Threashold\")) li_s <- list() l <- leaflet() %>% addTiles() for (i_r in seq_len(length(pressure_prob))) {   i_s <- metadata(pressure_prob[[i_r]])$sta_id   info <- pam_data$sta[pam_data$sta$sta_id == i_s, ]   info_str <- paste0(i_s, \" | \", info$start, \"->\", info$end)   li_s <- append(li_s, info_str)   l <- l %>% addRasterImage(pressure_prob[[i_r]], opacity = 0.8, colors = \"OrRd\", group = info_str) } l %>%   addLayersControl(     overlayGroups = li_s,     options = layersControlOptions(collapsed = FALSE)   ) %>%   hideGroup(tail(li_s, length(li_s) - 1)) raster::animate(brick(pressure_prob), n = 1)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/pressure-map.html","id":"computing-altitude","dir":"Articles","previous_headings":"","what":"Computing altitude","title":"Creating probability maps from pressure data","text":"second operation can perform GeoPressureR compute exact altitude bird \\(z_{gl}\\) pressure measurement \\(P_{gl}\\) assuming location \\(x\\). function uses ERA5 adjust barometric equation, \\[ z_{gl}(x)=z_{ERA5}(x) + \\frac{T_{ERA5}(x)}{L_b}  \\left( \\frac{P_{gl}}{P_{ERA5}(x)} \\right) ^{\\frac{RL_b}{g M}-1},\\] \\(z_{ERA}\\), \\(T_{ERA}\\) \\(T_{ERA}\\) respectively correspond ground level elevation, temperature 2m ground level pressure ERA5, \\(L_b\\) standard temperature lapse rate, \\(R\\) universal gas constant, \\(g\\) gravity constant \\(M\\) molar mass air. See information . can compute bird’s elevation first stationary period using likely position probability map. call function geopressure_ts() subset pressure containing sta_id==1 can compare altitude produced one computed without correction temperature pressure: visualize comparison: function geopressure_ts() also returns ground level pressure timeseries ERA5 location specified. useful check whether good match pressure measured geolocator one assumed location. operation typically used check quality manual labelling (see vignette label tracks). can repeat computation pressure timeserie stationary period","code":"i_r <- 1 i_s <- metadata(pressure_prob[[i_r]])$sta_id tmp <- as.data.frame(pressure_prob[[i_r]], xy = T) lon <- tmp$x[which.max(tmp[, 3])] lat <- tmp$y[which.max(tmp[, 3])] pressure_timeserie_1 <- geopressure_ts(lon, lat, pressure = subset(pam_data$pressure, sta_id == 1)) Lb <- -0.0065 R <- 8.31432 g0 <- 9.80665 M <- 0.0289644 T0 <- 273.15 + 15 P0 <- 1013.25 pressure_timeserie_1$altitude_baro <- T0 / Lb * ((pressure_timeserie_1$pressure / P0)^(-R * Lb / g0 / M) - 1) p <- ggplot() +   geom_line(data = as.data.frame(pressure_timeserie_1), aes(x = date, y = altitude, col = as.factor(\"Corrected elevation with ERA5\"))) +   geom_line(data = as.data.frame(pressure_timeserie_1), aes(x = date, y = altitude_baro, col = as.factor(\"Uncorrected elevation\"))) +   labs(col = \"\") +   theme_bw()  ggplotly(p) %>%   layout(legend = list(orientation = \"h\", x = -0.5)) pressure_timeserie <- list() for (i_r in seq_len(length(pressure_prob))) {   i_s <- metadata(pressure_prob[[i_r]])$sta_id   pressure_i_s <- subset(pam_data$pressure, sta_id == i_s)    # find the max value of probability   tmp <- as.data.frame(pressure_prob[[i_r]], xy = T)   lon <- tmp$x[which.max(tmp[, 3])]   lat <- tmp$y[which.max(tmp[, 3])]    # Dirty fix for i_s where the center of grid cell falls into water. This is due to `geopressure_map` looks for any location within a given grid cell being on land   if (i_s == 5) {     lat <- lat + res(pressure_prob[[i_r]])[1] / 2   }    # query the pressure at this location   message(\"query:\", i_r, \"/\", length(pressure_prob))   pressure_timeserie[[i_r]] <- geopressure_ts(lon, lat, pressure = pressure_i_s)    # Add sta_id   pressure_timeserie[[i_r]][\"sta_id\"] <- i_s    # Remove mean   pressure_timeserie[[i_r]]$pressure0 <- pressure_timeserie[[i_r]]$pressure - mean(pressure_timeserie[[i_r]]$pressure) + mean(pressure_i_s$obs) } usethis::use_data(pressure_timeserie, overwrite = T)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/probability-aggregation.html","id":"problem-presentation","dir":"Articles","previous_headings":"","what":"Problem presentation","title":"Probability aggregation","text":"stationary period, estimate probability position \\(\\textbf{x}\\) bird based pressure timeseries measured geolocator \\(P_{gl}[t] \\quad \\forall t \\[1,\\ldots,n]\\), Bayesian framework can written , \\[p(\\textbf{x}\\mid P_{gl}[1],\\ldots,P_{gl}[n]) \\propto p(P_{gl}[1],\\ldots,P_{gl}[n] \\mid \\textbf{x}) p(\\textbf{x}).\\] interested determining likelihood term \\(p(P_{gl} \\mid \\textbf{x})\\) represents probability observing timeseries \\(P_{gl}\\) knowing bird location \\(\\textbf{x}\\). quantify probability, look mismatch \\(P_{gl}\\) pressure timeseries ERA5 database \\(P_{ERA5}(\\textbf{x})\\) extracted location \\(\\textbf{x}\\). can reformulate likelihood probability function \\(f\\) error term \\(\\varepsilon(\\textbf{x})\\) measures distance \\(P_{gl}\\) \\(P_{ERA5}(\\textbf{x})\\) \\[p(P_{gl} \\mid \\textbf{x}) = f(\\varepsilon[1],\\ldots,\\varepsilon[n])\\] formulation problem helps us split problem two: first defining error term \\(\\varepsilon[t]\\) secondly defining likelihood function \\(f\\).","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/probability-aggregation.html","id":"error-term","dir":"Articles","previous_headings":"","what":"Error term","title":"Probability aggregation","text":"cases, expect measure error term simple difference \\(P_{ERA5}(\\textbf{x})[t]-P_{gl}[t].\\) However, within ERA5 grid cell 9-30km, can expect wide range altitude bird can located. offset two timeseries might due nothing difference altitude. solve issue, remove mean pressure difference, essentially ignoring absolute value pressure (altitude) error term quantify mismatch temporal variation, \\[\\varepsilon[t] =\\right( P_{ERA5}(\\textbf{x})[t]-P_{gl}[t]\\right) - \\left( \\frac{1}{n}\\sum_{=1}^{n} P_{ERA5}(\\textbf{x})[]-P_{gl}[] \\right).\\] way building error term important consequences. timeseries one datapoint always yield zero error locations, resulting equally probable map. number datapoints increases, error term become able distinguish “good” “bad” locations.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/probability-aggregation.html","id":"error-term-for-the-great-reed-warbler","dir":"Articles","previous_headings":"","what":"Error term for the Great Reed Warbler","title":"Probability aggregation","text":"Let’s load data compute basic operation (see use GeoPressureR information). using GeoPressure API geopressure_map() function measure mismatch pressure series. API can realistically return single map per stationary period, aggregates error timeseries Mean Squared Error (MSE), \\[\\mathit{MSE} = \\frac{1}{n}\\sum_{t=1}^{n} \\varepsilon[t]^2.\\] can post-process data get back basic metadata, number datapoints stationay period used. also compute position minimum MSE","code":"library(raster) #> Loading required package: sp library(GeoPressureR) pam_data = pam_read(system.file(\"extdata\", package = \"GeoPressureR\"),                     crop_start = \"2017-06-20\", crop_end = \"2018-05-02\") pam_data = trainset_read(pam_data, system.file(\"extdata\", package = \"GeoPressureR\")) pam_data = pam_sta(pam_data)  sta_id_keep = pam_data$sta$sta_id[difftime(pam_data$sta$end,pam_data$sta$start, units = \"hours\")>12] pam_data$pressure$sta_id[!(pam_data$pressure$sta_id %in% sta_id_keep)] = NA pressure_maps = geopressure_map(pam_data$pressure, extent=c(-16,20,0,50), scale=10, max_sample=100) sta <- data.frame() raster_mse_list <- c() for (i_s in 1:length(pressure_maps)) {   # get MSE layer   raster_mse_list[[i_s]] <- pressure_maps[[i_s]][[1]]   # change 0 (water) in NA   raster_mse_list[[i_s]][raster_mse_list[[i_s]] == 0] <- NA      # Acess geotiff metadata   mt <- raster::metadata(pressure_maps[[i_s]])      mt$start=mt$extend_sample[1]   mt$end=mt$extend_sample[2]   tmp = as.data.frame(raster_mse_list[[i_s]][[1]],xy=T)   mt$lon = tmp$x[which.min(tmp[,3])]   mt$lat = tmp$y[which.min(tmp[,3])]      sta = rbind(sta,as.data.frame(mt[-4])) } knitr::kable(head(sta))"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/probability-aggregation.html","id":"gaussian-likelihood-function","dir":"Articles","previous_headings":"","what":"Gaussian likelihood function","title":"Probability aggregation","text":"order find appropriate likelihood function, first need assume distribution error. sources errors (1) sensor measurement error, (2) ERA5 reanalysis error (3) attitudinal movement bird time. removing mean error, can ignore long-term errors (e.g., constant temporal error ERA5 biases geolocator sensor). figure shows error distribution known location equipment retrieval. look close enough Gaussian distribution. case Great Reed Warbler, standard deviation around 0.5. Therefore, assuming gaussian distribution error, Gaussian likelkhood multivariate normal distribution given \\[ f(\\boldsymbol{\\varepsilon})={\\frac {1}{(2\\pi)^{n/2} \\sqrt{\\det(\\boldsymbol{\\Sigma})}}}\\exp \\left(-\\frac{1}{2} \\boldsymbol{\\varepsilon} \\boldsymbol{\\Sigma}^{-1} \\boldsymbol{\\varepsilon} \\right).\\] vector notation \\(\\boldsymbol{\\varepsilon }=[\\varepsilon[1],\\ldots,\\varepsilon[n]]\\) covariance matrix \\(\\boldsymbol{\\Sigma}\\) contains variance two datapoints \\(\\boldsymbol{\\Sigma}_{t_1,t_2} = \\operatorname {E}[ \\varepsilon[t_1] \\varepsilon[t_2] ]\\).","code":"s=0.5"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/probability-aggregation.html","id":"independance-of-errors","dir":"Articles","previous_headings":"","what":"Independance of errors","title":"Probability aggregation","text":"covariance difficult quantify explicitly, can first look strong assumption independance error, \\(\\varepsilon_t \\overset{..d.}{\\sim} \\mathcal{N}(0,\\sigma)\\). case, Gaussian likelkhood function \\(f_{ind}\\) simply product normal probability density function error \\(\\varepsilon[t]\\), \\[ f_{ind}(\\boldsymbol{\\varepsilon})=\\prod _{t=1}^{n}f_\\mathcal{N}(\\varepsilon[t])=\\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{n/2}\\exp \\left(-{\\frac {\\sum _{t=1}^{n}\\varepsilon[t]^2}{2\\sigma ^2}}\\right).\\] can re-write equation function MSE \\[ f_{ind}(\\boldsymbol{\\varepsilon})=\\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{n/2}\\exp \\left(-n{\\frac {\\mathit{MSE}}{2\\sigma ^2}}\\right).\\] Using equation, can compute probability stationary periods. code , define likelihood function f_prob function \\(n\\), \\(\\sigma\\) MSE. define function display MSE probability 8 stationary periods based likelihood function. function used later compare likelihood function.  Assuming independance, gaussian likelihood transforms MSE probability narrow ranges uncertaintie. narrow long stationary period (i_s=1 17), enterie map 0. comes multiplication probability assumed independence case (see equation ). underlying assuming mulitplication operator conjunction probabilities, aggregating two information done operator: \\(P(~\\text{}~B) = P()\\times P(B)\\). information content overlaping every datapoint information kept.","code":"f_prob = function(n,s,MSE){   (1/(2*pi*s^2))^(n/2)*exp(-n*MSE/2/s^2) } fun_plot_prob <- function(f_prob,sta,pressure_maps){   raster_prob_list <- c()   for (i_s in 1:length(pressure_maps)) {     n = sta$nb_sample[i_s]     raster_prob_list[[i_s]] <- f_prob(n,s,raster_mse_list[[i_s]])   }   iis = c(1, 2, 5, 17, 24, 26)   sta[iis,]   dl=5   par(mfcol=c(2, length(iis)), mar=c(0,0,7,0), mai=c(0, 0, .1, 0))   for (i_s in iis){     plot(raster_mse_list[[i_s]],           main=paste0(\"MSE|i_s=\",i_s,\"|n=\",sta$nb_sample[i_s]),           horizontal = TRUE,           axes = FALSE,           legend.shrink=.8,          xlim=c(sta$lon[i_s]-dl,sta$lon[i_s]+dl), ylim=c(sta$lat[i_s]-dl,sta$lat[i_s]+dl)          )     points(sta$lon[i_s],sta$lat[i_s] )   }   for (i_s in iis){     plot(raster_prob_list[[i_s]], main=\"Prob\",           horizontal = TRUE, axes = FALSE, legend.shrink=.8,          xlim=c(sta$lon[i_s]-dl,sta$lon[i_s]+dl), ylim=c(sta$lat[i_s]-dl,sta$lat[i_s]+dl)          )     points(sta$lon[i_s],sta$lat[i_s] )   } } fun_plot_prob(f_prob,sta,pressure_maps)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/probability-aggregation.html","id":"quantifying-the-dependance-of-errors","dir":"Articles","previous_headings":"","what":"Quantifying the dependance of errors","title":"Probability aggregation","text":"Ploting auto-covariance calibration site species allow us see temporal pattern error. bird, can see clear daily fluctuation certainly due bird daily movement commute feeding roosting site. auto-covariance approaching 0 birds, expected removed mean value. However, sill reached 6hours 12 hours depending birds (Hoopoe doesn’t reach 3 days!). Auto-covariance error term observation, one option construct covariance matrix based auto-covariance. look like cleanest way , two issues. first one absence stationarity. Indeed, auto-covariance amplitude (potentially shape) strongly influenced vertical displacement bird, strongly correlated topography. instance, Eurasian Hoopoe high variance large temporal range breeds feet Alps. rest year, lives rather flat area. Therefore, covariance built breeding site appropriate sites. second issue definition error term different duration stationary period.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/probability-aggregation.html","id":"probability-aggregation","dir":"Articles","previous_headings":"","what":"Probability aggregation","title":"Probability aggregation","text":"rest vignette, take different angle, re-framing problem differently exploring options compute likelihood. field probability aggreation, problem combining sources information overlapping/redundant content frame finding pooling operator \\(F\\) , \\[p(\\textbf{x}\\mid \\varepsilon[1],\\ldots,\\varepsilon[n]) \\approx F(p(\\textbf{x} \\mid \\varepsilon[1]) ,\\ldots,p(\\textbf{x} \\mid \\varepsilon[n])),\\] , gaussian assumption, can written, \\[ F(f(\\varepsilon[1]),\\ldots,f(\\varepsilon[n]))=F(\\boldsymbol{\\varepsilon})\\]","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/probability-aggregation.html","id":"introduction-to-log-linear-pooling","dir":"Articles","previous_headings":"","what":"Introduction to Log-linear pooling","title":"Probability aggregation","text":"popular aggregation function log-linear pooling, \\[F(\\boldsymbol{\\varepsilon}) \\propto \\prod_{t=1}^n f(\\varepsilon[t])^{w_t}\\] equation also relies principle conjuction probability, uses weight \\(w_t\\) related new information brought additional \\(\\varepsilon[t]\\). Formally, can defined \\[w_t=\\frac{\\ln p(\\varepsilon[t] \\mid \\boldsymbol{x},\\varepsilon[1],\\ldots \\varepsilon[t-1])}{\\ln p(\\varepsilon[t] \\mid \\boldsymbol{x})}.\\] Allard et al. (2012) great resource learn probability aggregation log linear pooling. log-linear pooling aggregation simplifies case Gaussian independence \\(w_t=1\\). already explored case earlier. general case, using Gaussian probability density function formula, can write, \\[f(\\varepsilon[t])^{w_t} = \\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{w_t/2}\\exp \\left(-w_t{\\frac {\\varepsilon[t]^2}{2\\sigma ^2}}\\right).\\] , assume weight constant \\(w_t=w\\), can rewrite pooling aggregator \\[F(\\boldsymbol{\\varepsilon}) \\propto \\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{\\frac{wn}{2}} \\exp \\left(-{\\frac {w}{2\\sigma ^2}}\\sum _{t=1}^{n}\\varepsilon[t]^2\\right),\\] even write function MSE, \\[F(\\boldsymbol{\\varepsilon}) \\propto \\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{\\frac{wn}{2}} \\exp \\left(-{\\frac {wn}{2\\sigma ^2}}\\textit{MSE}\\right).\\]","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/probability-aggregation.html","id":"log-linear-pooling-w1n","dir":"Articles","previous_headings":"","what":"Log-linear pooling, \\(w=1/n\\)","title":"Probability aggregation","text":"interesting case \\(w=1/n\\), \\(\\sum_t w_t=1\\). simplify log-linear pooling aggregator \\[ F(\\boldsymbol{\\varepsilon})={\\frac {1}{\\sigma\\sqrt{2\\pi} }}\\exp \\left(-{\\frac {1}{2\\sigma ^2}\\mathit{MSE}}\\right),\\] can interpreted Gaussian probability distributions MSE. length timeseries \\(n\\) disappeared equation, aggregation dependence mean square errors, regardless many datapoints. can try see influence probability map.  expected disappearance n, uncertainty now completely independent duration stationary period. obviously want, shows extreme log-linear pooling.","code":"f_prob = function(n,s,x){   w = 1/n   (1/(2*pi*s^2))^(n*w/2)*exp(-w*n/2/(s^2)*x) } fun_plot_prob(f_prob,sta,pressure_maps)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/probability-aggregation.html","id":"log-linear-pooling-w-lognn","dir":"Articles","previous_headings":"","what":"Log-linear pooling, \\(w = \\log(n)/n\\)","title":"Probability aggregation","text":"study, chose use \\(w=\\frac{\\log(n)}{n}\\), result pooling aggregation \\[F(\\boldsymbol{\\varepsilon}) \\propto \\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{\\frac{w\\log(n)}{2}} \\exp \\left(-{\\frac {\\log(n)}{2\\sigma ^2}}\\textit{MSE}\\right).\\] scheme designed minimize strength \\(1/n\\)","code":"f_prob = function(n,s,x){   w = log(n)/n   (1/(2*pi*s^2))^(n*w/2)*exp(-w*n/2/(s^2)*x) } fun_plot_prob(f_prob,sta,pressure_maps)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/probability-aggregation.html","id":"validation","dir":"Articles","previous_headings":"","what":"Validation","title":"Probability aggregation","text":"Validation uncertainty estimation relatively difficult, especially datapoints assume behaviour bird might differ calibration sites (equipement retrival) rest journey. figure , examples uncertainty estimate shown. Ideally, want colored area small (low uncertainty), assessing uncertainty, also want red cross fall within colored area. , red cross often outside, estimator confident. Furthermore, shape uncertainty can strongly anisotripic (e.g., hoopoe bottom right) making distance likely point (blue) true value (red cross) poor measure uncertainty. Uncertainty pressure mismatch (colorscale) equipement period shwoing true equipement sire (red cross) wihtin probability map estimated likely value Assessing uncertainty relies checking red cross distributed according uncertainty shape. formal way quantifiying uncertainty quantile true value \\(q=p(\\boldsymbol{x}\\leq \\boldsymbol{x}_{true})\\), corresponds proability variable less equal true value. , true value belongs distribution, distribution quantile uniform. can visualize empirical cumulative distribution quantiles fall 1:1 line (like qq-plot). two extreme cases (\\(w=1\\) \\(w=1/n\\)) show overconfidence (line) underconfidence (line) respectively. Indeed, distribution quantile using \\(w=1/n\\) method shows lot quantile values 0.9-1, indicates true value within 90% uncertainty contour (underconfident).  method chosen (\\(w=\\log(n)/n\\)) better , still general underconfident. calibration validation performed rather long temporal serie (equipement retrival), one can expect labelisation pressure better/easier places. Thus, seems appropriate slightly underconfident method developed. covariance aggregation scheme implemented computing covariance matrix multi-variate Gaussian distribution. covariance function build using exact variogram species. , theory, correct method, looks overconfident. Thus didn’t use now. Looking forward, calibration highly dependant local topography ability bird move . Manual edition/labeling also strong impact.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/wind-graph.html","id":"download-wind-data","dir":"Articles","previous_headings":"","what":"Download wind data","title":"graph-with-wind","text":"flight short duration, suggest download file flight. Using ecmfr package, can send query download files.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/articles/wind-graph.html","id":"setup-up-cds-access","dir":"Articles","previous_headings":"","what":"Setup-up CDS access","title":"graph-with-wind","text":"Define 37 pressure level possible ERA5 Define area query","code":"#Sys.setenv( cds.key=\"Insert_your_CDS_API_KEY_here\") #Sys.setenv( cds.user=\"Insert_your_CDS_UID_here\") cds.key <- Sys.getenv('cds.key') cds.user <- Sys.getenv('cds.user') wf_set_key(user = cds.user, key = cds.key, service = \"cds\") possible_pressure = c(1, 2, 3, 5, 7, 10, 20, 30, 50, 70, seq(100,250,25), seq(300,750,50), seq(775,1000,25))  area = extent(static_prob[[1]]) area = c(area@ymax, area@xmin, area@ymin, area@xmax) req <- list() for (i_s in seq_len(nrow(pam_data$sta)-1)){   # Get the timeserie of the flight on a 1 hour resolution   flight_time = seq(round(pam_data$sta$end[i_s]-30*60, units = \"hours\"), round(pam_data$sta$start[i_s+1]+30*60, units = \"hours\"), by=60*60)      # Find the pressure level needed during this flight   flight_id =  flight_time[1] <= pam_data$pressure$date & pam_data$pressure$date <=  tail(flight_time,1)   pres_id_min = sum(!(min(pam_data$pressure$obs[flight_id]) < possible_pressure))   pres_id_max = sum(max(pam_data$pressure$obs[flight_id]) > possible_pressure)+1   flight_pres_id = seq(pres_id_min, min(pres_id_max,length(possible_pressure)))      # Prepare the query   request <- list(     dataset_short_name = \"reanalysis-era5-pressure-levels\",     product_type   = \"reanalysis\",     format = \"netcdf\",     variable = c('u_component_of_wind', 'v_component_of_wind'),     pressure_level = possible_pressure[flight_pres_id],     year = sort(unique(format(flight_time,'%Y'))),     month = sort(unique(format(flight_time,'%m'))),     day = sort(unique(format(flight_time,'%d'))),     time = sort(unique(format(flight_time,'%H:%M'))),     # area is specified as N, W, S, E     area = area   )   # We can send the query without downloading the data. This allows to send all of them and then wait to get them back later.     req[[i_s]] <- wf_request(user = cds.user, request = request, transfer = F) } # Define a temporary folder to download the data. wf_transfer will download the file in the temporary folder by default dir.save <- tempdir() # ~  for (i_s in seq_len(nrow(pam_data$sta)-1)){   filename = paste0(\"18IC_\",i_s,\".nc\")   ncfile <- wf_transfer(url = req[[i_s]]$request_id, service = \"cds\", user = cds.user, path = dir.save, filename=filename) } # Download all the data and read the file in raster format wind_maps_u = list() wind_maps_v = list()  c_data <- nc_open(paste0(dir.save,\"/\",filename)) t <- ncvar_get(c_data, \"u\")  for (i_s in seq_len(nrow(pam_data$sta)-1)){   filename = paste0(\"18IC_\",i_s,\".nc\")   ncfile <- wf_transfer(url = req[[i_s]]$request_id, service = \"cds\", user = cds.user, path = dir.save, filename=filename)   # wind_maps_u[[i_s]] <- raster::raster(paste0(dir.save,\"/\",filename),varname=\"u\",lvar=4)   # raster::brick(paste0(dir.save,\"/\",filename),varname=\"u\")   # wind_maps_v[[i_s]] <- raster::raster(paste0(dir.save,\"/\",filename),varname=\"v\") }"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Raphaël Nussbaumer. Author, maintainer. Mathieu Gravey. Author.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nussbaumer R, Gravey M (2022). GeoPressureR: Location Reanalysed Pressure. https://github.com/Rafnuss/GeoPressureR, https://raphaelnussbaumer.com/GeoPressureR/.","code":"@Manual{,   title = {GeoPressureR: Location from Reanalysed Pressure},   author = {Raphaël Nussbaumer and Mathieu Gravey},   year = {2022},   note = {https://github.com/Rafnuss/GeoPressureR, https://raphaelnussbaumer.com/GeoPressureR/}, }"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/index.html","id":"geopressurer-","dir":"","previous_headings":"","what":"Location from Reanalysed Pressure","title":"Location from Reanalysed Pressure","text":"goal GeoPressureR help researcher analyse pressure measurement geolocator. Part 1: Firstly, provides R wrapper around GeoPressure API query probability map using ERA5 pressure. Part 2: Secondly, using mathematical graph, allows model trajectory producing exact probability map stationary period simulating paths.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Location from Reanalysed Pressure","text":"can install development version GeoPressureR GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"Rafnuss/GeoPressureR\")"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/index.html","id":"where-to-start","dir":"","previous_headings":"","what":"Where to start?","title":"Location from Reanalysed Pressure","text":"Using example Great Reed Warbler (18LX), vignettes designed guide steps great details. vignette Pressure map good place understand basic workflow used compute probability map pressure measurement (part 1). guide (redirect ) steps loading data, labeling timeseries, querying ERA5 pressure map finally computing likelihood map. probability maps computed, vignette Basic graph help create graph compute three main outputs: (1) likely trajectory, (2) (posterior) probability map stationary period (3) simulation possible path.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/index.html","id":"related-ressources","dir":"","previous_headings":"","what":"Related Ressources","title":"Location from Reanalysed Pressure","text":"Raphaël Nussbaumer, Mathieu Gravey, Felix Liechti Global positioning atmospheric pressure retrieved multi-sensor geolocators, 25 February 2022, PREPRINT (Version 1) available Research Square [https://doi.org/10.21203/rs.3.rs-1381915/v1] Raphaël Nussbaumer, Mathieu Gravey, Felix Liechti et al. Improving spatial accuracy multi-sensor geolocators’ position using atmospheric surface pressure. October 2021. 7th International Bio-logging Science Symposium.PRESENTATION available Youtube.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/index.html","id":"related-code","dir":"","previous_headings":"","what":"Related Code","title":"Location from Reanalysed Pressure","text":"GeoPressureMAT development method done MATLAB. repo codes. GeoPressure API core computation Google Earth Engine done. can look see done. GeoLight R package analyse light data. borrowing function (see geolight.R) PAMLr: Extensive toolbox analyse multi-sensor geolocator. Several function package inspired package (see pam.R).","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/index.html","id":"want-to-contribute","dir":"","previous_headings":"","what":"Want to contribute?","title":"Location from Reanalysed Pressure","text":"code still active development. Feel free submit issue Github suggetions bugs","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/find_twilights.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for twilight times — find_twilights","title":"Search for twilight times — find_twilights","text":"Search pairs twilights spanning night.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/find_twilights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for twilight times — find_twilights","text":"","code":"find_twilights(   light,   threshold,   include,   exclude = NULL,   extend = 0,   dark_min = 0 )"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/find_twilights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for twilight times — find_twilights","text":"light dataframe columns date obs sequence sample times (POSIXct) light levels recorded tag. threshold light threshold defines twilight. include vector times POSIXct. Nights span times included search. exclude vector POSIXct times. Nights span times excluded search. extend time minutes. function seeks periods darkness differ one another 24 hours plus minus interval. dark_min time minutes. Periods darkness shorter interval excluded.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/find_twilights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for twilight times — find_twilights","text":"dataframe columns twilight times twilight rise logical indicating sunrise row corresponds single twilight.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/find_twilights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for twilight times — find_twilights","text":"Search sunset, sunrise pairs correspond given light threshold. Given set times (include) known fall night, find_twilights determines twilights span times, computes corresponding midnights. searches periods darkness lie approximately 24 hours midnights, repeating process new twilight pairs found. interleave=TRUE, sunrise sunset times interleaved andreturned single sequence twilights, otherwise sunset sunrise times returned separately. function interleave.twilights takes dataframe separate sunset sunrise times interleaves form sequence twilight times.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Request and download mismatch maps of pressure — geopressure_map","title":"Request and download mismatch maps of pressure — geopressure_map","text":"function return mismatch map atmospheric pressure measured geolocator (PAM_data). performs following actions: (1) Send query produce Google Earth Engine (GEE) url code producing maps stationary periods separately, (2) read map (geotiff) raster (3) compute likelihood map mismatch. See GeoPressure API documentation .","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request and download mismatch maps of pressure — geopressure_map","text":"","code":"geopressure_map(pressure, extent, scale = 10, max_sample = 250, margin = 30)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request and download mismatch maps of pressure — geopressure_map","text":"pressure pressure data PAM logger. data.frame needs contains date POSIXt, obs hPa, sta_id grouping observation measured stationary period isoutliar logical label observation need ignorede. best practice use pam_read() pam_sta() build data.frame. extent Geographical extent map query list ordered North, West, South, East  (e.g. c(50,-16,0,20)). scale Number pixel per latitude, longitude. 10 resoltion 0.1° (~10) 4 resolution 0.25° (~30km). avoid interpolating ERA5 data, scale smaller 10. Read scale Google earth Engine documentation. max_sample computation mismatch performed max_sample datapoints pressure reduce computational time. samples randomly (uniformly) selected timeserie. margin margin used threshold map accept measurement error. unit meter. (1hPa~10m)","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request and download mismatch maps of pressure — geopressure_map","text":"List raster map","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Request and download mismatch maps of pressure — geopressure_map","text":"","code":"if (FALSE) { pam_data <- pam_read(   pathname = system.file(\"extdata\", package = \"GeoPressureR\"),   crop_start = \"2017-06-20\", crop_end = \"2018-05-02\" ) pam_data <- trainset_read(pam_data,   pathname = system.file(\"extdata\", package = \"GeoPressureR\") ) pam_data <- pam_sta(pam_data) pressure_maps <- geopressure_map(   pam_data$pressure,   extent = c(-16, 20, 0, 50),   scale = 10,   max_sample = 250,   margin = 30 ) } data(\"pressure_maps\", package = \"GeoPressureR\") raster::metadata(pressure_maps[[1]]) #> $sta_id #> [1] 1 #>  #> $nb_sample #> [1] 1099 #>  #> $max_sample #> [1] 250 #>  #> $temporal_extent #> [1] \"2017-06-20 01:00:00 UTC\" \"2017-08-04 19:00:00 UTC\" #>  #> $margin #> [1] 30 #>  raster::plot(pressure_maps[[1]],   main = c(\"Mean Square Error\", \"Mask of pressure\") )"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_prob_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute probability raster — geopressure_prob_map","title":"Compute probability raster — geopressure_prob_map","text":"function convert raster noramlized MSE altitude threshold \\(z_{thr}\\) computed geopressure_map() probability map , \\(p = \\exp \\left(-w \\frac{MSE}{s} \\right) \\left[z_{thr}>thr \\right],\\) \\(s\\) standard deviation pressure \\(thr\\) threashold. auto-correlation timeseries accounted equation, use log-linear pooling weight \\(w=\\log(n) - 1\\), \\(n\\) number data point timeserie. operation describe ","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_prob_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute probability raster — geopressure_prob_map","text":"","code":"geopressure_prob_map(pressure_maps, s = 1, thr = 0.9)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_prob_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute probability raster — geopressure_prob_map","text":"pressure_maps list raster built geopressure_map() s standard deviation pressure error thr threshold percentage data point outside elevation range considered possible","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_prob_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute probability raster — geopressure_prob_map","text":"List probability raster map","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_prob_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute probability raster — geopressure_prob_map","text":"","code":"if (FALSE) { pam_data <- pam_read(   pathname = system.file(\"extdata\", package = \"GeoPressureR\"),   crop_start = \"2017-06-20\", crop_end = \"2018-05-02\" ) pam_data <- trainset_read(pam_data,   pathname = system.file(\"extdata\", package = \"GeoPressureR\") ) pam_data <- pam_sta(pam_data) pressure_maps <- geopressure_map(   pam_data$pressure,   extent = c(50, -16, 0, 20),   scale = 10 ) pressure_prob <- geopressure_prob_map(   pressure_maps,   s = 0.4,   thr = 0.9 ) } data(\"pressure_prob\", package = \"GeoPressureR\") raster::metadata(pressure_prob[[1]]) #> $sta_id #> [1] 1 #>  #> $nb_sample #> [1] 1099 #>  #> $max_sample #> [1] 250 #>  #> $temporal_extent #> [1] \"2017-06-20 01:00:00 UTC\" \"2017-08-04 19:00:00 UTC\" #>  #> $margin #> [1] 30 #>  raster::plot(pressure_prob[[1]],   main = \"Probability\",   xlim = c(5, 20), ylim = c(42, 50) )"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Request and download surface pressure timeseries at location — geopressure_ts","title":"Request and download surface pressure timeseries at location — geopressure_ts","text":"function return surfrace atmospheric pressure timeseries ERA5 particualy location specify lat lon. uses SRTM-30 translate pressure exact elevation ground level, accounting temporal varation pressure temperature.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request and download surface pressure timeseries at location — geopressure_ts","text":"","code":"geopressure_ts(lon, lat, pressure = NULL, end_time = NULL, start_time = NULL)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request and download surface pressure timeseries at location — geopressure_ts","text":"lon longitude query (-180° 180°). lat latitude query (0° 90°). pressure pressure list PAM logger dataset list end_time start_time start_time pressure provided, start_time timeserie return needed","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request and download surface pressure timeseries at location — geopressure_ts","text":"Timeserie date, pressure optionally altitude","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Request and download surface pressure timeseries at location — geopressure_ts","text":"supply pressure (time) geolocator, additionally return elevation geolocator sea level considering bird located location specify timeserie response time supply, otherwise, return hourly basis start_time end_time.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Request and download surface pressure timeseries at location — geopressure_ts","text":"","code":"if (FALSE) { pam_data <- pam_read(   pathname = system.file(\"extdata\", package = \"GeoPressureR\"),   crop_start = \"2017-06-20\", crop_end = \"2018-05-02\" ) pam_data <- trainset_read(pam_data,   pathname = system.file(\"extdata\", package = \"GeoPressureR\") ) pam_data <- pam_sta(pam_data) pressure_timeserie[[1]] <- geopressure_ts(   lon = 16.85,   lat = 48.75,   pressure = subset(pam_data$pressure, sta_id == 1) ) } data(\"pressure_timeserie\", package = \"GeoPressureR\") par(mfrow = c(2, 1), mar = c(2, 5, 1, 1)) plot(pressure_timeserie[[1]]$date,   pressure_timeserie[[1]]$pressure,   ylab = \"Pressure [hPa]\", xlab = \"\" ) plot(pressure_timeserie[[1]]$date,   pressure_timeserie[[1]]$altitude,   ylab = \"Altitude [m asl]\", xlab = \"\" )"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create graph — graph_create","title":"Create graph — graph_create","text":"function return graph representing trajectory bird based filtering triming probability maps provided.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create graph — graph_create","text":"","code":"graph_create(static_prob, thr_prob_percentile = 0.99, thr_gs = 150)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create graph — graph_create","text":"static_prob list raster containing probability map stationary period. metadata static_prob needs include flight duration next stationary period variable next_flight_duration numeric hours. thr_prob_percentile threshold percentile (see explanation ) thr_gs threashold groundspeed (km/h)  (see explanation )","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create graph — graph_create","text":"graph list (see description )","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create graph — graph_create","text":"final graph, keep likely node (position time) defined : cumulative probability reach thr_prob_percentile stationary period. average ground speed lower thr_gs km/h. graph returned list edges graph containing: s: source node (index 3d grid lat-lon-sta), t: target node (index 3d grid lat-lon-sta), gs: average ground speed required make transition (km/h) ps: static probability target node sz: size 3d grid lat-lon-sta equipement: node(s) first sta (index 3d grid lat-lon-sta) retrival: node(s) last sta (index 3d grid lat-lon-sta) flight_duration: list flight duration next sta hours lat: list static_prob latitude cell center lon: list static_prob longitude cell center extent: raster geographical extent `static_prob`` resolution: raster res static_prob temporal_extent: start end date time retrieved metadata static_prob vignette use graph provided example prepare data function output function","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_marginal.html","id":null,"dir":"Reference","previous_headings":"","what":"Marginal Probability Map — graph_marginal","title":"Marginal Probability Map — graph_marginal","text":"function return marginal probability map raster graph.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_marginal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal Probability Map — graph_marginal","text":"","code":"graph_marginal(grl)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_marginal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal Probability Map — graph_marginal","text":"grl graph constructed geopressure_graph_create()","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_marginal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Marginal Probability Map — graph_marginal","text":"list raster marginal probability stationary period","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_path2lonlat.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the lattitude and longitude from a path index — graph_path2lonlat","title":"Find the lattitude and longitude from a path index — graph_path2lonlat","text":"Find lattitude longitude path index","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_path2lonlat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the lattitude and longitude from a path index — graph_path2lonlat","text":"","code":"graph_path2lonlat(path_id, grl)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_path2lonlat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the lattitude and longitude from a path index — graph_path2lonlat","text":"path_id list matrix node index grl graph constructed geopressure_graph_create()","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_path2lonlat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the lattitude and longitude from a path index — graph_path2lonlat","text":"list path latitude longitude","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of trajectory — graph_simulation","title":"Simulation of trajectory — graph_simulation","text":"function generate simulated path graph","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of trajectory — graph_simulation","text":"","code":"graph_simulation(grl, nj = 100)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of trajectory — graph_simulation","text":"grl graph constructed geopressure_graph_create() nj number simulation","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/graph_simulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of trajectory — graph_simulation","text":"list simulated path","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/light_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Light probability map for 18LX — light_prob","title":"Light probability map for 18LX — light_prob","text":"dataset contains data generated GeoPressure API generated vignettes Light Map. light_prob list raster containing probability map stationary period.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/light_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Light probability map for 18LX — light_prob","text":"","code":"light_prob"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/light_prob.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Light probability map for 18LX — light_prob","text":"object class list length 29.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_classify.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic classification of pam — pam_classify","title":"Automatic classification of pam — pam_classify","text":"function uses activity data classify migratory flapping flight. returns dats list pam adding column ismig data.frame acceleration.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_classify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic classification of pam — pam_classify","text":"","code":"pam_classify(pam, min_duration = 30)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_classify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic classification of pam — pam_classify","text":"pam data list min_duration duration minutes","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_classify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic classification of pam — pam_classify","text":"pam","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_classify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Automatic classification of pam — pam_classify","text":"fonction inspired function classify_flap pamLr package.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_classify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatic classification of pam — pam_classify","text":"","code":"pam_data <- pam_read(   pathname = system.file(\"extdata\", package = \"GeoPressureR\"),   crop_start = \"2017-06-20\", crop_end = \"2018-05-02\" ) pam_data <- pam_classify(pam_data, min_duration = 30) head(pam_data$acceleration) #>                  date pit act ismig #> 1 2017-06-20 00:00:00  26   0 FALSE #> 2 2017-06-20 00:05:00  26   0 FALSE #> 3 2017-06-20 00:10:00  27   0 FALSE #> 4 2017-06-20 00:15:00  27   0 FALSE #> 5 2017-06-20 00:20:00  27   0 FALSE #> 6 2017-06-20 00:25:00  28   3 FALSE"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read pam data — pam_read","title":"Read pam data — pam_read","text":"Imports multi-sensor logger data folder optionally crop specific date. Read available file extension list exist folder.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read pam data — pam_read","text":"","code":"pam_read(   pathname,   extension = c(\"pressure\", \"glf\", \"acceleration\", \"temperature\", \"magnetic\"),   crop_start = \"1900-01-01\",   crop_end = \"2100-01-01\" )"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read pam data — pam_read","text":"pathname path files stored extension list file extentions read (e.g., \".pressure\", \".glf\", \".gle\",\".acceleration\", \".temperature\" \".magnetic\") crop_start date pam data start crop_end date pam data end","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read pam data — pam_read","text":"list measurements","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read pam data — pam_read","text":"","code":"pam_data <- pam_read(   pathname = system.file(\"extdata\", package = \"GeoPressureR\"),   crop_start = \"2017-06-20\", crop_end = \"2018-05-02\" ) summary(pam_data) #>              Length Class      Mode      #> id           1      -none-     character #> acceleration 3      data.frame list      #> light        2      data.frame list      #> pressure     2      data.frame list      #> temperature  2      data.frame list      for (i in 1:length(pam_data)) {   head(pam_data[[i]]) }"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read pam file — pam_read_file","title":"Read pam file — pam_read_file","text":"Read pam file return corresponding data.frame.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read pam file — pam_read_file","text":"","code":"pam_read_file(filename, crop_start, crop_end)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read pam file — pam_read_file","text":"filename path files stored crop_start posicxt object date pam data start crop_end posicxt object date pam data end","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read pam file — pam_read_file","text":"data.frame measurement","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_sta.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute stationary periods — pam_sta","title":"Compute stationary periods — pam_sta","text":"function computes table stationary periods class acceleration pam$acceleration$ismig add pam data sta_id","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_sta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute stationary periods — pam_sta","text":"","code":"pam_sta(pam)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_sta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute stationary periods — pam_sta","text":"pam pam logger dataset list","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_sta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute stationary periods — pam_sta","text":"pam logger dataset list dataframe stationary periods pam$sta well new label named sta_id (pam$pressure$sta_id pam$acceleration$sta_id)","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pam_sta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute stationary periods — pam_sta","text":"","code":"pam_data <- pam_read(   pathname = system.file(\"extdata\", package = \"GeoPressureR\"),   crop_start = \"2017-06-20\", crop_end = \"2018-05-02\" ) pam_data <- trainset_read(pam_data,   pathname = system.file(\"extdata\", package = \"GeoPressureR\") ) pam_data <- pam_sta(pam_data) head(pam_data$pressure) #>                  date  obs isoutliar sta_id #> 1 2017-06-20 00:00:00 1001     FALSE      0 #> 2 2017-06-20 00:30:00 1001     FALSE      1 #> 3 2017-06-20 01:00:00 1001     FALSE      1 #> 4 2017-06-20 01:30:00 1001     FALSE      1 #> 5 2017-06-20 02:00:00 1001     FALSE      1 #> 6 2017-06-20 02:30:00 1001     FALSE      1 head(pam_data$acceleration) #>                  date pit act ismig #> 1 2017-06-20 00:00:00  26   0 FALSE #> 2 2017-06-20 00:05:00  26   0 FALSE #> 3 2017-06-20 00:10:00  27   0 FALSE #> 4 2017-06-20 00:15:00  27   0 FALSE #> 5 2017-06-20 00:20:00  27   0 FALSE #> 6 2017-06-20 00:25:00  28   3 FALSE"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pressure_maps.html","id":null,"dir":"Reference","previous_headings":"","what":"Pressure mismatch and threshold map for 18LX — pressure_maps","title":"Pressure mismatch and threshold map for 18LX — pressure_maps","text":"dataset contains data generated GeoPressure API generated vignettes Pressure Map. pressure_maps list brick containing mismatch threshold map stationary period.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pressure_maps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pressure mismatch and threshold map for 18LX — pressure_maps","text":"","code":"pressure_maps"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pressure_maps.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pressure mismatch and threshold map for 18LX — pressure_maps","text":"object class list length 29.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pressure_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Pressure probability map for 18LX — pressure_prob","title":"Pressure probability map for 18LX — pressure_prob","text":"dataset contains data generated GeoPressure API generated vignettes Pressure Map. pressure_prob list raster containing probability map stationary period.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pressure_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pressure probability map for 18LX — pressure_prob","text":"","code":"pressure_prob"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pressure_prob.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pressure probability map for 18LX — pressure_prob","text":"object class list length 29.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pressure_timeserie.html","id":null,"dir":"Reference","previous_headings":"","what":"Pressure timeseries for 18LX — pressure_timeserie","title":"Pressure timeseries for 18LX — pressure_timeserie","text":"dataset contains data generated GeoPressure API generated vignettes Pressure Map. pressure_timeserie list stationary period","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pressure_timeserie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pressure timeseries for 18LX — pressure_timeserie","text":"","code":"pressure_timeserie"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/pressure_timeserie.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pressure timeseries for 18LX — pressure_timeserie","text":"object class list length 29.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/refracted.html","id":null,"dir":"Reference","previous_headings":"","what":"Atmospheric Refraction — refracted","title":"Atmospheric Refraction — refracted","text":"Adjust solar zenith angle atmospheric refraction.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/refracted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atmospheric Refraction — refracted","text":"","code":"refracted(zenith)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/refracted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atmospheric Refraction — refracted","text":"zenith zenith angle (degrees) adjust.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/refracted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atmospheric Refraction — refracted","text":"vector zenith angles (degrees) adjusted atmospheric refraction.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/refracted.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Atmospheric Refraction — refracted","text":"Given vector solar zeniths computed zenith, refracted calculates solar zeniths adjusted effect atmospheric refraction. unrefracted inverse refracted. Given (single) solar zenith adjusted effect atmospheric refraction, unrefracted calculates solar zenith computed zenith.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/refracted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atmospheric Refraction — refracted","text":"","code":"## Refraction causes the sun to appears higher on the horizon refracted(85:92) #> [1] 84.84038 85.81110 86.77132 87.71632 88.63663 89.51806 90.66944 91.83477"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/solar.html","id":null,"dir":"Reference","previous_headings":"","what":"Solar Time and Declination — solar","title":"Solar Time and Declination — solar","text":"Calculate solar time, equation time solar declination","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/solar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solar Time and Declination — solar","text":"","code":"solar(tm)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/solar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solar Time and Declination — solar","text":"tm vector POSIXct times.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/solar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solar Time and Declination — solar","text":"list containing following vectors. solar_time solar time (degrees) eqn_time equation time (minutes time) sin_solar_dec sine solar declination cos_solar_dec cosine solar declination","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/solar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solar Time and Declination — solar","text":"solar time, equation time sine cosine solar declination calculated times specified tm using methods www.esrl.noaa.gov/gmd/grad/solcalc/.","code":""},{"path":[]},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/solar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Solar Time and Declination — solar","text":"","code":"## Current solar time solar(Sys.time()) #> $solar_time #> [1] 347.3758 #>  #> $eqn_time #> [1] -4.300817 #>  #> $sin_solar_dec #> [1] 0.07061858 #>  #> $cos_solar_dec #> [1] 0.9975034 #>"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/static_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Static probability map for 18LX — static_prob","title":"Static probability map for 18LX — static_prob","text":"dataset generated vignette Prepare Data. static_prob list raster containing probability map stationary period.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/static_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Static probability map for 18LX — static_prob","text":"","code":"static_prob"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/static_prob.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Static probability map for 18LX — static_prob","text":"object class list length 29.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/trainset_edit.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit classification of activity and pressure — trainset_edit","title":"Edit classification of activity and pressure — trainset_edit","text":"function perform three steps: (1) write csv file automatically labeled activity pressure trainset_write, (2) open trainset broweser (https://trainset.geocene.com/) can edit labels (3) read exported csv file trainset trainset_read.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/trainset_edit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit classification of activity and pressure — trainset_edit","text":"","code":"trainset_edit(   pam,   pathname,   filename = paste0(pam$id, \"_act_pres-labeled.csv\") )"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/trainset_edit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit classification of activity and pressure — trainset_edit","text":"pam pam logger dataset list pathname Path folder labeled files saved filename Name file.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/trainset_edit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edit classification of activity and pressure — trainset_edit","text":"pam logger dataset list updated labels (pam$pressure$isoutliar pam$acceleration$ismig)","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/trainset_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read classification of activity and pressure — trainset_read","title":"Read classification of activity and pressure — trainset_read","text":"function read exported csv file trainset (https://trainset.geocene.com/) update pam logger dataset","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/trainset_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read classification of activity and pressure — trainset_read","text":"","code":"trainset_read(   pam,   pathname,   filename = paste0(pam$id, \"_act_pres-labeled.csv\") )"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/trainset_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read classification of activity and pressure — trainset_read","text":"pam pam logger dataset list pathname Path folder labeled file . filename Name file.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/trainset_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read classification of activity and pressure — trainset_read","text":"pam logger dataset list updated labels (pam$pressure$isoutliar pam$acceleration$ismig)","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/trainset_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read classification of activity and pressure — trainset_read","text":"","code":"pam_data <- pam_read(   pathname = system.file(\"extdata\", package = \"GeoPressureR\"),   crop_start = \"2017-06-20\", crop_end = \"2018-05-02\" ) pam_data <- trainset_read(pam_data,   pathname = system.file(\"extdata\", package = \"GeoPressureR\") ) head(pam_data$pressure) #>                  date  obs isoutliar #> 1 2017-06-20 00:00:00 1001     FALSE #> 2 2017-06-20 00:30:00 1001     FALSE #> 3 2017-06-20 01:00:00 1001     FALSE #> 4 2017-06-20 01:30:00 1001     FALSE #> 5 2017-06-20 02:00:00 1001     FALSE #> 6 2017-06-20 02:30:00 1001     FALSE head(pam_data$acceleration) #>                  date pit act ismig #> 1 2017-06-20 00:00:00  26   0 FALSE #> 2 2017-06-20 00:05:00  26   0 FALSE #> 3 2017-06-20 00:10:00  27   0 FALSE #> 4 2017-06-20 00:15:00  27   0 FALSE #> 5 2017-06-20 00:20:00  27   0 FALSE #> 6 2017-06-20 00:25:00  28   3 FALSE"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/trainset_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write classification of activity and pressure — trainset_write","title":"Write classification of activity and pressure — trainset_write","text":"function writes csv file automatically labeled activity pressure can read TRAINSET (https://trainset.geocene.com/).","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/trainset_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write classification of activity and pressure — trainset_write","text":"","code":"trainset_write(pam, pathname, filename = paste0(pam$id, \"_act_pres\"))"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/trainset_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write classification of activity and pressure — trainset_write","text":"pam pam logger dataset list pathname Path folder labeled files saved filename Name file.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/trainset_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write classification of activity and pressure — trainset_write","text":"","code":"if (FALSE) { pam_data <- pam_read(   pathname = system.file(\"extdata\", package = \"GeoPressureR\"),   crop_start = \"2017-06-20\", crop_end = \"2018-05-02\" ) pam_data <- pam_classify(pam_data) trainset_write(pam_data,   pathname = system.file(\"extdata\", package = \"GeoPressureR\") ) }"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/zenith.html","id":null,"dir":"Reference","previous_headings":"","what":"Solar Zenith Angle — zenith","title":"Solar Zenith Angle — zenith","text":"Calculate solar zenith angle given times locations","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/zenith.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solar Zenith Angle — zenith","text":"","code":"zenith(sun, lon, lat)"},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/zenith.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solar Zenith Angle — zenith","text":"sun list solar time declination computed solar. lon vector longitudes. lat vector latitudes.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/zenith.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solar Zenith Angle — zenith","text":"vector solar zenith angles (degrees) given locations times.","code":""},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/zenith.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solar Zenith Angle — zenith","text":"zenith uses solar time declination calculated solar compute solar zenith angle given times locations, using methods www.esrl.noaa.gov/gmd/grad/solcalc/.  function adjust atmospheric refraction see refracted.","code":""},{"path":[]},{"path":"https://raphaelnussbaumer.com/GeoPressureR/reference/zenith.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Solar Zenith Angle — zenith","text":"","code":"## Approx location of Sydney Harbour Bridge lon <- 151.211 lat <- -33.852 ## Solar zenith angle for noon on the first of May 2000 ## at the Sydney Harbour Bridge s <- solar(as.POSIXct(\"2000-05-01 12:00:00\",\"EST\")) zenith(s,lon,lat) #> [1] 133.9373"}]
