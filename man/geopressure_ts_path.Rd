% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geopressure.R
\name{geopressure_ts_path}
\alias{geopressure_ts_path}
\title{Query the timeserie of pressure from a path and geolocator pressure}
\usage{
geopressure_ts_path(path, pressure, include_flight = F, verbose = T)
}
\arguments{
\item{path}{A data.frame of the position containing latitude (\code{lat}), longitude  (\code{lon}) and the
stationay period id (\code{sta_id}) as column.}

\item{pressure}{Pressure list from PAM logger dataset list.}

\item{include_flight}{Extend request to also query the pressure and altitude during the previous
and/or next flight. Flights are defined by a \code{sta_id=0}. Accept Logical or vector of -1 (previous
flight), 0 (stationary) and/or 1 (next flight). (e.g. \code{include_flight=c(-1, 1)} will only search
for the flight before and after but not the stationary period). Note that next and previous
flights are defined by the +/1 of the \code{sta_id} value (and not the previous/next \code{sta_id} value).}

\item{verbose}{Display (or not) the progress of the queries (logical).}
}
\value{
List of data.frame containing for each stationary period, the date, pressure, altitude
(same as \code{\link[=geopressure_ts]{geopressure_ts()}}) but also \code{sta_id}, \code{lat}, \code{lon} and \code{pressure0} (the pressure
normalized to the geolocator mean pressure measurement).
}
\description{
This function runs in parallel \code{geopressure_ts()} based on a path and pressure timeserie. It
uses the \code{sta_id} to match the pressure timeserie to request for each position of the path.
}
\details{
You can include previous and/or next flight period in each query. This is typically useful to
estimate flight altitude with greater precision.

If a position of the path is over water, it will be moved to the closest point onshore as
explained in \code{geopressure_ts()}.
}
\examples{
# Create pam_data
pam_data <- pam_read(
  pathname = system.file("extdata", package = "GeoPressureR"),
  crop_start = "2017-06-20", crop_end = "2018-05-02"
)
pam_data <- trainset_read(pam_data,
  pathname = system.file("extdata", package = "GeoPressureR")
)
pam_data <- pam_sta(pam_data)
\dontrun{
# load probability map of pressure
pressure_prob <- readRDS(system.file("extdata", "18LX_pressure_prob.rda",
  package = "GeoPressureR"
))
# Find the most likely position
path <- geopressure_map2path(pressure_prob)
# compute the pressure at those location for the period in question
pressure_timeserie <- geopressure_ts_path(path, pam_data$pressure)
}
pressure_timeserie <- readRDS(system.file("extdata", "18LX_pressure_timeserie.rda",
  package = "GeoPressureR"
))
p <- ggplot2::ggplot() +
  ggplot2::geom_line(
    data = pam_data$pressure,
    ggplot2::aes(x = date, y = obs), colour = "grey"
  ) +
  ggplot2::geom_point(
    data = subset(pam_data$pressure, isoutliar),
    ggplot2::aes(x = date, y = obs), colour = "black"
  ) +
  ggplot2::geom_line(
    data = subset(do.call("rbind", pressure_timeserie), sta_id != 0),
    ggplot2::aes(x = date, y = pressure0, col = as.factor(sta_id))
  ) +
  ggplot2::theme_bw() +
  ggplot2::scale_colour_manual(values = rep(RColorBrewer::brewer.pal(9, "Set1"), times = 4))

py <- plotly::ggplotly(p, dynamicTicks = TRUE)
py <- plotly::layout(py,
  showlegend = FALSE,
  legend = list(orientation = "h", x = -0.5),
  yaxis = list(title = "Pressure [hPa]")
)
py
}
\seealso{
\code{\link[=geopressure_ts]{geopressure_ts()}}, \code{\link[=geopressure_map2path]{geopressure_map2path()}}, \href{https://raphaelnussbaumer.com/GeoPressureR/articles/pressure-map.html}{Vignette Pressure Map }
}
