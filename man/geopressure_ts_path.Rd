% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geopressure.R
\name{geopressure_ts_path}
\alias{geopressure_ts_path}
\title{Query the timeserie of pressure from a path and geolocator pressure
observation}
\usage{
geopressure_ts_path(path, pressure)
}
\arguments{
\item{path}{a data.frame of the position containing latitude (\code{lat}), longitude  (\code{lon}) and the
stationay period id (\code{sta_id}) as column.}

\item{pressure}{pressure list from PAM logger dataset list}
}
\value{
list of data.frame containing for each stationay period, the date, pressure, altitude
(same as \code{geopressure_ts()}) but also sta_id, lat, lon and pressure0, pressure normalized to
match geolocator pressure measurement.
}
\description{
Query the timeserie of pressure from a path and geolocator pressure
observation
}
\examples{
# Create pam_data
pam_data <- pam_read(
  pathname = system.file("extdata", package = "GeoPressureR"),
  crop_start = "2017-06-20", crop_end = "2018-05-02"
)
pam_data <- trainset_read(pam_data,
  pathname = system.file("extdata", package = "GeoPressureR")
)
pam_data <- pam_sta(pam_data)
\dontrun{
# load probability map of pressure
load(system.file("extdata", "18LX_pressure_prob.rda", package = "GeoPressureR"))
# Find the most likely position
path <- geopressure_map2path(pressure_prob)
# compute the pressure at those location for the period in question
pressure_timeserie <- geopressure_ts_path(path, pam_data$pressure)
}
load(system.file("extdata", "18LX_pressure_timeserie.rda", package = "GeoPressureR"))
p <- ggplot2::ggplot() +
  ggplot2::geom_line(
    data = pam_data$pressure,
    ggplot2::aes(x = date, y = obs), colour = "grey"
  ) +
  ggplot2::geom_point(
    data = subset(pam_data$pressure, isoutliar),
    ggplot2::aes(x = date, y = obs), colour = "black"
  ) +
  ggplot2::geom_line(
    data = do.call("rbind", pressure_timeserie),
    ggplot2::aes(x = date, y = pressure0, col = as.factor(sta_id))
  ) +
  ggplot2::theme_bw() +
  ggplot2::scale_colour_manual(values = rep(RColorBrewer::brewer.pal(9, "Set1"), times = 4))

py <- plotly::ggplotly(p, dynamicTicks = TRUE)
py <- plotly::layout(py,
  showlegend = FALSE,
  legend = list(orientation = "h", x = -0.5),
  yaxis = list(title = "Pressure [hPa]")
)
py
}
