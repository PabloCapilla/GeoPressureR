% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geopressure.R
\name{geopressure_map2path}
\alias{geopressure_map2path}
\title{Return the most likely path from a probability map}
\usage{
geopressure_map2path(map, interp = 0, format = "lonlat")
}
\arguments{
\item{map}{list of raster containing probability map of each stationary period. The metadata of
\code{map} needs to include the start and end time of the stationary period .}

\item{interp}{(in days) The position of the stationary period shorter than \code{interp} will be
replace by a linear average from other position.}

\item{format}{one of \code{"lonlat"}, \code{"ind"}, \code{"arr.ind"}). return the path in lon-lat or indices}
}
\value{
a data.frame of the position containing latitude (\code{lat}), longitude (\code{lon}) and the
stationary period id (\code{sta_id}) as column. Optionally, if indexes were requested, it will be
return. You will need to use \code{which.max(as.matrix(raster))} and not \code{which.max(raster)} to get
the correct location
}
\description{
Find the location of the highest value in the map and return a path data.frame containing the
latitude and longitude. \code{interp} can be used to interpolate unrealistic position from short
stationary period based on the position of the longer ones. The interpolation assumes that the
first and last stationary period can be safely estimated from the probability map.
}
\examples{
data("pressure_prob", package = "GeoPressureR")
path_all <- geopressure_map2path(pressure_prob)
path_interp <- geopressure_map2path(pressure_prob, interp = 2)
sta_duration <- unlist(lapply(pressure_prob, function(x) {
  as.numeric(difftime(raster::metadata(x)$temporal_extent[2],
    raster::metadata(x)$temporal_extent[1],
    units = "days"
  ))
}))
m <- leaflet::leaflet()
m <- leaflet::addTiles(m)
m <- leaflet::addPolylines(m,
  lng = path_all$lon, lat = path_all$lat, opacity = 1,
  color = "#a6cee3", weight = 3
)
m <- leaflet::addCircles(m,
  lng = path_all$lon, lat = path_all$lat, opacity = 1,
  color = "#1f78b4", weight = sta_duration^(0.3) * 10
)
m <- leaflet::addPolylines(m,
  lng = path_interp$lon, lat = path_interp$lat, opacity = 1,
  color = "#b2df8a", weight = 3
)
m <- leaflet::addCircles(m,
  lng = path_interp$lon, lat = path_interp$lat, opacity = 1,
  color = "#33a02c", weight = sta_duration^(0.3) * 10
)
m
}
